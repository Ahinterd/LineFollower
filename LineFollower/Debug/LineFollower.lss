
LineFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800200  00001274  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  008002a8  008002a8  000013b0  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000270  00000000  00000000  00002279  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002028  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d68  00000000  00000000  00004511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001997  00000000  00000000  00005279  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  00006c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008d5  00000000  00000000  000071c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001642  00000000  00000000  00007a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  000090d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	a2 c1       	rjmp	.+836    	; 0x35a <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__vector_15>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e7       	ldi	r30, 0x74	; 116
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3a       	cpi	r26, 0xA8	; 168
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a8 ea       	ldi	r26, 0xA8	; 168
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 34       	cpi	r26, 0x4F	; 79
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	6d d1       	rcall	.+730    	; 0x3fa <main>
     120:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <initUSART>:
int IRSensorRight(){
	return 0;
}
int IRSensorMid(){
	return 0;
}
     126:	cf 92       	push	r12
     128:	ef 92       	push	r14
     12a:	0f 93       	push	r16
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	6d d2       	rcall	.+1242   	; 0x60a <USARTInitSTDIO>
     130:	c1 2c       	mov	r12, r1
     132:	ee 24       	eor	r14, r14
     134:	e3 94       	inc	r14
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	40 e8       	ldi	r20, 0x80	; 128
     13c:	55 e2       	ldi	r21, 0x25	; 37
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	6a d2       	rcall	.+1236   	; 0x61a <USARTInit>
     146:	0f 91       	pop	r16
     148:	ef 90       	pop	r14
     14a:	cf 90       	pop	r12
     14c:	08 95       	ret

0000014e <initNunchuck>:
     14e:	3d c5       	rjmp	.+2682   	; 0xbca <wiinunchuck_init>
     150:	08 95       	ret

00000152 <initUltrasonic>:
     152:	ea e6       	ldi	r30, 0x6A	; 106
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	81 60       	ori	r24, 0x01	; 1
     15a:	80 83       	st	Z, r24
     15c:	ec 9a       	sbi	0x1d, 4	; 29
     15e:	08 9a       	sbi	0x01, 0	; 1
     160:	6c 98       	cbi	0x0d, 4	; 13
     162:	10 92 ab 02 	sts	0x02AB, r1
     166:	10 92 aa 02 	sts	0x02AA, r1
     16a:	08 95       	ret

0000016c <initMotor>:
     16c:	84 b5       	in	r24, 0x24	; 36
     16e:	81 68       	ori	r24, 0x81	; 129
     170:	84 bd       	out	0x24, r24	; 36
     172:	85 b5       	in	r24, 0x25	; 37
     174:	81 60       	ori	r24, 0x01	; 1
     176:	85 bd       	out	0x25, r24	; 37
     178:	27 9a       	sbi	0x04, 7	; 4
     17a:	81 b1       	in	r24, 0x01	; 1
     17c:	84 61       	ori	r24, 0x14	; 20
     17e:	81 b9       	out	0x01, r24	; 1
     180:	17 bc       	out	0x27, r1	; 39
     182:	08 95       	ret

00000184 <initStepper>:
     184:	81 b1       	in	r24, 0x01	; 1
     186:	8a 6a       	ori	r24, 0xAA	; 170
     188:	81 b9       	out	0x01, r24	; 1
     18a:	08 95       	ret

0000018c <stepLeft>:
     18c:	8e e1       	ldi	r24, 0x1E	; 30
     18e:	92 e0       	ldi	r25, 0x02	; 2
     190:	a8 d5       	rcall	.+2896   	; 0xce2 <puts>
     192:	e0 e1       	ldi	r30, 0x10	; 16
     194:	f2 e0       	ldi	r31, 0x02	; 2
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	32 e0       	ldi	r19, 0x02	; 2
     19a:	92 b1       	in	r25, 0x02	; 2
     19c:	32 97       	sbiw	r30, 0x02	; 2
     19e:	80 81       	ld	r24, Z
     1a0:	89 2b       	or	r24, r25
     1a2:	82 b9       	out	0x02, r24	; 2
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	98 e1       	ldi	r25, 0x18	; 24
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <stepLeft+0x1c>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <stepLeft+0x22>
     1ae:	00 00       	nop
     1b0:	80 91 a8 02 	lds	r24, 0x02A8
     1b4:	90 91 a9 02 	lds	r25, 0x02A9
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	90 93 a9 02 	sts	0x02A9, r25
     1be:	80 93 a8 02 	sts	0x02A8, r24
     1c2:	92 b1       	in	r25, 0x02	; 2
     1c4:	80 81       	ld	r24, Z
     1c6:	80 95       	com	r24
     1c8:	89 23       	and	r24, r25
     1ca:	82 b9       	out	0x02, r24	; 2
     1cc:	e2 17       	cp	r30, r18
     1ce:	f3 07       	cpc	r31, r19
     1d0:	21 f7       	brne	.-56     	; 0x19a <stepLeft+0xe>
     1d2:	08 95       	ret

000001d4 <stepRight>:
     1d4:	88 e2       	ldi	r24, 0x28	; 40
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	84 d5       	rcall	.+2824   	; 0xce2 <puts>
     1da:	e0 e0       	ldi	r30, 0x00	; 0
     1dc:	f2 e0       	ldi	r31, 0x02	; 2
     1de:	20 e1       	ldi	r18, 0x10	; 16
     1e0:	32 e0       	ldi	r19, 0x02	; 2
     1e2:	92 b1       	in	r25, 0x02	; 2
     1e4:	df 01       	movw	r26, r30
     1e6:	80 81       	ld	r24, Z
     1e8:	89 2b       	or	r24, r25
     1ea:	82 b9       	out	0x02, r24	; 2
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	98 e1       	ldi	r25, 0x18	; 24
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <stepRight+0x1c>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <stepRight+0x22>
     1f6:	00 00       	nop
     1f8:	80 91 a8 02 	lds	r24, 0x02A8
     1fc:	90 91 a9 02 	lds	r25, 0x02A9
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	90 93 a9 02 	sts	0x02A9, r25
     206:	80 93 a8 02 	sts	0x02A8, r24
     20a:	92 b1       	in	r25, 0x02	; 2
     20c:	32 96       	adiw	r30, 0x02	; 2
     20e:	8c 91       	ld	r24, X
     210:	80 95       	com	r24
     212:	89 23       	and	r24, r25
     214:	82 b9       	out	0x02, r24	; 2
     216:	e2 17       	cp	r30, r18
     218:	f3 07       	cpc	r31, r19
     21a:	19 f7       	brne	.-58     	; 0x1e2 <stepRight+0xe>
     21c:	08 95       	ret

0000021e <ultrasonic_init_timer2>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 b1 00 	sts	0x00B1, r24
     224:	80 93 70 00 	sts	0x0070, r24
     228:	10 92 b2 00 	sts	0x00B2, r1
     22c:	10 92 bd 02 	sts	0x02BD, r1
     230:	10 92 bc 02 	sts	0x02BC, r1
     234:	08 95       	ret

00000236 <ultrasonic_stop_timer2>:
     236:	10 92 b1 00 	sts	0x00B1, r1
     23a:	08 95       	ret

0000023c <nunchuck_getData>:
     23c:	0e d4       	rcall	.+2076   	; 0xa5a <wiinunchuck_update>
     23e:	c7 d3       	rcall	.+1934   	; 0x9ce <wiinunchuck_getbuttonC>
     240:	80 93 be 02 	sts	0x02BE, r24
     244:	c1 d3       	rcall	.+1922   	; 0x9c8 <wiinunchuck_getbuttonZ>
     246:	80 93 c8 02 	sts	0x02C8, r24
     24a:	71 d3       	rcall	.+1762   	; 0x92e <wiinunchuck_getjoyX>
     24c:	90 93 c3 02 	sts	0x02C3, r25
     250:	80 93 c2 02 	sts	0x02C2, r24
     254:	90 d3       	rcall	.+1824   	; 0x976 <wiinunchuck_getjoyY>
     256:	90 93 c1 02 	sts	0x02C1, r25
     25a:	80 93 c0 02 	sts	0x02C0, r24
     25e:	ba d3       	rcall	.+1908   	; 0x9d4 <wiinunchuck_getangleX>
     260:	90 93 c5 02 	sts	0x02C5, r25
     264:	80 93 c4 02 	sts	0x02C4, r24
     268:	be d3       	rcall	.+1916   	; 0x9e6 <wiinunchuck_getangleY>
     26a:	90 93 ca 02 	sts	0x02CA, r25
     26e:	80 93 c9 02 	sts	0x02C9, r24
     272:	c2 d3       	rcall	.+1924   	; 0x9f8 <wiinunchuck_getangleZ>
     274:	90 93 c7 02 	sts	0x02C7, r25
     278:	80 93 c6 02 	sts	0x02C6, r24
     27c:	08 95       	ret

0000027e <nunchuckCheckY>:
     27e:	80 91 c0 02 	lds	r24, 0x02C0
     282:	90 91 c1 02 	lds	r25, 0x02C1
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	91 05       	cpc	r25, r1
     28a:	d4 f0       	brlt	.+52     	; 0x2c0 <nunchuckCheckY+0x42>
     28c:	4f ef       	ldi	r20, 0xFF	; 255
     28e:	48 9f       	mul	r20, r24
     290:	90 01       	movw	r18, r0
     292:	49 9f       	mul	r20, r25
     294:	30 0d       	add	r19, r0
     296:	11 24       	eor	r1, r1
     298:	c9 01       	movw	r24, r18
     29a:	67 e6       	ldi	r22, 0x67	; 103
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	ac d4       	rcall	.+2392   	; 0xbf8 <__divmodhi4>
     2a0:	67 bd       	out	0x27, r22	; 39
     2a2:	12 9a       	sbi	0x02, 2	; 2
     2a4:	14 98       	cbi	0x02, 4	; 2
     2a6:	87 b5       	in	r24, 0x27	; 39
     2a8:	1f 92       	push	r1
     2aa:	8f 93       	push	r24
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	05 d5       	rcall	.+2570   	; 0xcc0 <printf>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret
     2c0:	8c 3f       	cpi	r24, 0xFC	; 252
     2c2:	2f ef       	ldi	r18, 0xFF	; 255
     2c4:	92 07       	cpc	r25, r18
     2c6:	a4 f4       	brge	.+40     	; 0x2f0 <nunchuckCheckY+0x72>
     2c8:	67 e6       	ldi	r22, 0x67	; 103
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	95 d4       	rcall	.+2346   	; 0xbf8 <__divmodhi4>
     2ce:	2f ef       	ldi	r18, 0xFF	; 255
     2d0:	26 9f       	mul	r18, r22
     2d2:	c0 01       	movw	r24, r0
     2d4:	27 9f       	mul	r18, r23
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
     2da:	99 23       	and	r25, r25
     2dc:	0c f4       	brge	.+2      	; 0x2e0 <nunchuckCheckY+0x62>
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	95 95       	asr	r25
     2e2:	87 95       	ror	r24
     2e4:	87 bd       	out	0x27, r24	; 39
     2e6:	14 9a       	sbi	0x02, 4	; 2
     2e8:	12 98       	cbi	0x02, 2	; 2
     2ea:	87 e3       	ldi	r24, 0x37	; 55
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	f9 c4       	rjmp	.+2546   	; 0xce2 <puts>
     2f0:	17 bc       	out	0x27, r1	; 39
     2f2:	12 98       	cbi	0x02, 2	; 2
     2f4:	14 98       	cbi	0x02, 4	; 2
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	f3 c4       	rjmp	.+2534   	; 0xce2 <puts>

000002fc <nunchuckCheckX>:
     2fc:	80 91 c2 02 	lds	r24, 0x02C2
     300:	90 91 c3 02 	lds	r25, 0x02C3
     304:	8b 30       	cpi	r24, 0x0B	; 11
     306:	91 05       	cpc	r25, r1
     308:	0c f0       	brlt	.+2      	; 0x30c <nunchuckCheckX+0x10>
     30a:	64 cf       	rjmp	.-312    	; 0x1d4 <stepRight>
     30c:	86 3f       	cpi	r24, 0xF6	; 246
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	0c f4       	brge	.+2      	; 0x314 <nunchuckCheckX+0x18>
     312:	3c cf       	rjmp	.-392    	; 0x18c <stepLeft>
     314:	08 95       	ret

00000316 <ultrasonicCheckDist>:
     316:	85 e1       	ldi	r24, 0x15	; 21
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret

0000031c <__vector_15>:
//Service Routine for Timer 2 (used for ultrasonic sensor)
ISR (TIMER2_OVF_vect)
{	
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	2f 93       	push	r18
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
	ultrasonic_timerOVFValue++;
     32c:	80 91 bc 02 	lds	r24, 0x02BC
     330:	90 91 bd 02 	lds	r25, 0x02BD
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	90 93 bd 02 	sts	0x02BD, r25
     33a:	80 93 bc 02 	sts	0x02BC, r24
	//check if Object out of range
	if(ultrasonic_timerOVFValue>1460){
     33e:	85 3b       	cpi	r24, 0xB5	; 181
     340:	95 40       	sbci	r25, 0x05	; 5
     342:	18 f0       	brcs	.+6      	; 0x34a <__vector_15+0x2e>
		ultrasonic_error = 1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 bf 02 	sts	0x02BF, r24
	}
}
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	2f 91       	pop	r18
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <__vector_5>:
//Service Routine for Interrupt 4 which is used for ultrasonic sensor (echo)
ISR (INT4_vect)
{
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	0b b6       	in	r0, 0x3b	; 59
     366:	0f 92       	push	r0
     368:	2f 93       	push	r18
     36a:	3f 93       	push	r19
     36c:	4f 93       	push	r20
     36e:	5f 93       	push	r21
     370:	6f 93       	push	r22
     372:	7f 93       	push	r23
     374:	8f 93       	push	r24
     376:	9f 93       	push	r25
     378:	af 93       	push	r26
     37a:	bf 93       	push	r27
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
	printf("interrupt4");
     380:	85 e4       	ldi	r24, 0x45	; 69
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	9f 93       	push	r25
     386:	8f 93       	push	r24
     388:	9b d4       	rcall	.+2358   	; 0xcc0 <printf>
	if(ultrasonic_working==1)			//check if signal was sent before echo was incoming
     38a:	80 91 aa 02 	lds	r24, 0x02AA
     38e:	90 91 ab 02 	lds	r25, 0x02AB
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	e9 f4       	brne	.+58     	; 0x3d4 <__vector_5+0x7a>
	{
		if(ultrasonic_rising_edge==0)	//Check if echo is high
     39a:	80 91 ae 02 	lds	r24, 0x02AE
     39e:	90 91 af 02 	lds	r25, 0x02AF
     3a2:	89 2b       	or	r24, r25
     3a4:	41 f4       	brne	.+16     	; 0x3b6 <__vector_5+0x5c>
		{
			ultrasonic_init_timer2();	//start timer
     3a6:	3b df       	rcall	.-394    	; 0x21e <ultrasonic_init_timer2>
			ultrasonic_rising_edge=1;	
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 af 02 	sts	0x02AF, r25
     3b0:	80 93 ae 02 	sts	0x02AE, r24
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <__vector_5+0x7a>
		}
		else //Check if echo turned low, calculate distance
		{
			ultrasonic_stop_timer2();	//stop timer
     3b6:	3f df       	rcall	.-386    	; 0x236 <ultrasonic_stop_timer2>
			ultrasonic_rising_edge = 0;			//reset values
     3b8:	10 92 af 02 	sts	0x02AF, r1
     3bc:	10 92 ae 02 	sts	0x02AE, r1
			ultrasonic_working = 0;
     3c0:	10 92 ab 02 	sts	0x02AB, r1
     3c4:	10 92 aa 02 	sts	0x02AA, r1
			ultrasonic_gotSignal = 1;				//confirm success
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 ad 02 	sts	0x02AD, r25
     3d0:	80 93 ac 02 	sts	0x02AC, r24
		}
	}
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <main>:
int main(void)
{
	
	sei();
     3fa:	78 94       	sei
	initUSART();
     3fc:	94 de       	rcall	.-728    	; 0x126 <initUSART>
	printf("Starting\n");
     3fe:	80 e5       	ldi	r24, 0x50	; 80
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	6f d4       	rcall	.+2270   	; 0xce2 <puts>
	initNunchuck();
     404:	a4 de       	rcall	.-696    	; 0x14e <initNunchuck>
	initUltrasonic();
     406:	a5 de       	rcall	.-694    	; 0x152 <initUltrasonic>
	initIRSensor();
	initMotor();
     408:	b1 de       	rcall	.-670    	; 0x16c <initMotor>
	initStepper();
     40a:	bc de       	rcall	.-648    	; 0x184 <initStepper>
	printf("Initialization complete!\n");
     40c:	89 e5       	ldi	r24, 0x59	; 89
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	68 d4       	rcall	.+2256   	; 0xce2 <puts>
			
			
			nunchuck_getData();			
			if(buttonC)													//When C pressed toggle Automatic Mode
			{
				automatic = 1;
     412:	c1 e0       	ldi	r28, 0x01	; 1
	initStepper();
	printf("Initialization complete!\n");
	
    while(1)
    {
		if(automatic == 0)												//Check if Automatic Mode not enabled
     414:	80 91 b0 02 	lds	r24, 0x02B0
     418:	81 11       	cpse	r24, r1
     41a:	13 c0       	rjmp	.+38     	; 0x442 <main+0x48>

			//printf("\nZ: %i\nC: %i\nX: %i\nY: %i\n", buttonZ, buttonC, joyX, joyY);
			//_delay_ms(500);
			
			
			nunchuck_getData();			
     41c:	0f df       	rcall	.-482    	; 0x23c <nunchuck_getData>
			if(buttonC)													//When C pressed toggle Automatic Mode
     41e:	80 91 be 02 	lds	r24, 0x02BE
     422:	88 23       	and	r24, r24
     424:	59 f0       	breq	.+22     	; 0x43c <main+0x42>
			{
				automatic = 1;
     426:	c0 93 b0 02 	sts	0x02B0, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	89 e6       	ldi	r24, 0x69	; 105
     42e:	98 e1       	ldi	r25, 0x18	; 24
     430:	21 50       	subi	r18, 0x01	; 1
     432:	80 40       	sbci	r24, 0x00	; 0
     434:	90 40       	sbci	r25, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <main+0x36>
     438:	00 c0       	rjmp	.+0      	; 0x43a <main+0x40>
     43a:	00 00       	nop
				_delay_ms(500);
			}
			nunchuckCheckY();
     43c:	20 df       	rcall	.-448    	; 0x27e <nunchuckCheckY>
			nunchuckCheckX();
     43e:	5e df       	rcall	.-324    	; 0x2fc <nunchuckCheckX>
     440:	e9 cf       	rjmp	.-46     	; 0x414 <main+0x1a>
			
			
		}else  															//In Automatic Mode
		{
			printf("Auto mode!\n\n");
     442:	82 e7       	ldi	r24, 0x72	; 114
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	4d d4       	rcall	.+2202   	; 0xce2 <puts>
			if(buttonC){
     448:	80 91 be 02 	lds	r24, 0x02BE
     44c:	88 23       	and	r24, r24
     44e:	59 f0       	breq	.+22     	; 0x466 <main+0x6c>
				automatic = 0;
     450:	10 92 b0 02 	sts	0x02B0, r1
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	89 e6       	ldi	r24, 0x69	; 105
     458:	98 e1       	ldi	r25, 0x18	; 24
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	90 40       	sbci	r25, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <main+0x60>
     462:	00 c0       	rjmp	.+0      	; 0x464 <main+0x6a>
     464:	00 00       	nop
				_delay_ms(500);
			}
										
			if(ultrasonicCheckDist()<20)								//Check Distance to obstacle
     466:	57 df       	rcall	.-338    	; 0x316 <ultrasonicCheckDist>
     468:	44 97       	sbiw	r24, 0x14	; 20
     46a:	24 f4       	brge	.+8      	; 0x474 <main+0x7a>
			{															//In Automatic Mode, obstacle in range
				printf("Obstacle in Range\n");			
     46c:	8e e7       	ldi	r24, 0x7E	; 126
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	38 d4       	rcall	.+2160   	; 0xce2 <puts>
     472:	d0 cf       	rjmp	.-96     	; 0x414 <main+0x1a>
			
			}else                       								//In Automatic Mode, no obstacle in range
			{	
				printf("NO OBSTACLE\n");														
     474:	80 e9       	ldi	r24, 0x90	; 144
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	34 d4       	rcall	.+2152   	; 0xce2 <puts>
     47a:	cc cf       	rjmp	.-104    	; 0x414 <main+0x1a>

0000047c <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     47c:	10 92 b9 00 	sts	0x00B9, r1
     480:	88 e9       	ldi	r24, 0x98	; 152
     482:	80 93 b8 00 	sts	0x00B8, r24
     486:	08 95       	ret

00000488 <i2c_start_wait>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec eb       	ldi	r30, 0xBC	; 188
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	24 ea       	ldi	r18, 0xA4	; 164
     492:	a9 eb       	ldi	r26, 0xB9	; 185
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	cb eb       	ldi	r28, 0xBB	; 187
     498:	d0 e0       	ldi	r29, 0x00	; 0
     49a:	34 e8       	ldi	r19, 0x84	; 132
     49c:	44 e9       	ldi	r20, 0x94	; 148
     49e:	20 83       	st	Z, r18
     4a0:	90 81       	ld	r25, Z
     4a2:	99 23       	and	r25, r25
     4a4:	ec f7       	brge	.-6      	; 0x4a0 <i2c_start_wait+0x18>
     4a6:	9c 91       	ld	r25, X
     4a8:	98 7f       	andi	r25, 0xF8	; 248
     4aa:	98 30       	cpi	r25, 0x08	; 8
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <i2c_start_wait+0x2a>
     4ae:	90 31       	cpi	r25, 0x10	; 16
     4b0:	b1 f7       	brne	.-20     	; 0x49e <i2c_start_wait+0x16>
     4b2:	88 83       	st	Y, r24
     4b4:	30 83       	st	Z, r19
     4b6:	90 81       	ld	r25, Z
     4b8:	99 23       	and	r25, r25
     4ba:	ec f7       	brge	.-6      	; 0x4b6 <i2c_start_wait+0x2e>
     4bc:	9c 91       	ld	r25, X
     4be:	98 7f       	andi	r25, 0xF8	; 248
     4c0:	90 32       	cpi	r25, 0x20	; 32
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <i2c_start_wait+0x40>
     4c4:	98 35       	cpi	r25, 0x58	; 88
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <i2c_start_wait+0x4a>
     4c8:	40 83       	st	Z, r20
     4ca:	90 81       	ld	r25, Z
     4cc:	94 fd       	sbrc	r25, 4
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <i2c_start_wait+0x42>
     4d0:	e6 cf       	rjmp	.-52     	; 0x49e <i2c_start_wait+0x16>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4d8:	84 e9       	ldi	r24, 0x94	; 148
     4da:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     4de:	ec eb       	ldi	r30, 0xBC	; 188
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	84 fd       	sbrc	r24, 4
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <i2c_stop+0xa>

}/* i2c_stop */
     4e8:	08 95       	ret

000004ea <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     4ea:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     4ee:	84 e8       	ldi	r24, 0x84	; 132
     4f0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     4f4:	ec eb       	ldi	r30, 0xBC	; 188
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	88 23       	and	r24, r24
     4fc:	ec f7       	brge	.-6      	; 0x4f8 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     4fe:	90 91 b9 00 	lds	r25, 0x00B9
     502:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	98 32       	cpi	r25, 0x28	; 40
     508:	09 f4       	brne	.+2      	; 0x50c <i2c_write+0x22>
     50a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     50c:	08 95       	ret

0000050e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     50e:	84 ec       	ldi	r24, 0xC4	; 196
     510:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     514:	ec eb       	ldi	r30, 0xBC	; 188
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	ec f7       	brge	.-6      	; 0x518 <i2c_readAck+0xa>

    return TWDR;
     51e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     522:	08 95       	ret

00000524 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     524:	84 e8       	ldi	r24, 0x84	; 132
     526:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     52a:	ec eb       	ldi	r30, 0xBC	; 188
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	ec f7       	brge	.-6      	; 0x52e <i2c_readNak+0xa>
	
    return TWDR;
     534:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     538:	08 95       	ret

0000053a <USARTPutChar>:
Function for sending data via standard USART by printf
@param c character to be sent
@param *stream outputstream
@retval c (sended char), expected by printf
*******************************************************************************/
int16_t USARTPutChar(char c, FILE *stream) {
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
#if defined (__AVR_ATmega2560__)        // stdio sends by USART0
  switch ( usart_stdio) {
     53e:	80 91 b1 02 	lds	r24, 0x02B1
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	89 f0       	breq	.+34     	; 0x568 <USARTPutChar+0x2e>
     546:	83 30       	cpi	r24, 0x03	; 3
     548:	19 f0       	breq	.+6      	; 0x550 <USARTPutChar+0x16>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	29 f5       	brne	.+74     	; 0x598 <USARTPutChar+0x5e>
     54e:	18 c0       	rjmp	.+48     	; 0x580 <USARTPutChar+0x46>
    case 3 :
      if (c == '\n') USARTPutChar('\r', stream);
     550:	ca 30       	cpi	r28, 0x0A	; 10
     552:	11 f4       	brne	.+4      	; 0x558 <USARTPutChar+0x1e>
     554:	8d e0       	ldi	r24, 0x0D	; 13
     556:	f1 df       	rcall	.-30     	; 0x53a <USARTPutChar>
      loop_until_bit_is_set(UCSR3A, UDRE3);
     558:	e0 e3       	ldi	r30, 0x30	; 48
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	80 81       	ld	r24, Z
     55e:	85 ff       	sbrs	r24, 5
     560:	fd cf       	rjmp	.-6      	; 0x55c <USARTPutChar+0x22>
      UDR3 = c;
     562:	c0 93 36 01 	sts	0x0136, r28
      break;
     566:	23 c0       	rjmp	.+70     	; 0x5ae <USARTPutChar+0x74>
    case 2 :
      if (c == '\n') USARTPutChar('\r', stream);
     568:	ca 30       	cpi	r28, 0x0A	; 10
     56a:	11 f4       	brne	.+4      	; 0x570 <USARTPutChar+0x36>
     56c:	8d e0       	ldi	r24, 0x0D	; 13
     56e:	e5 df       	rcall	.-54     	; 0x53a <USARTPutChar>
      loop_until_bit_is_set(UCSR2A, UDRE2);
     570:	e0 ed       	ldi	r30, 0xD0	; 208
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <USARTPutChar+0x3a>
      UDR2 = c;
     57a:	c0 93 d6 00 	sts	0x00D6, r28
      break;
     57e:	17 c0       	rjmp	.+46     	; 0x5ae <USARTPutChar+0x74>
    case 1 :
      if (c == '\n') USARTPutChar('\r', stream);
     580:	ca 30       	cpi	r28, 0x0A	; 10
     582:	11 f4       	brne	.+4      	; 0x588 <USARTPutChar+0x4e>
     584:	8d e0       	ldi	r24, 0x0D	; 13
     586:	d9 df       	rcall	.-78     	; 0x53a <USARTPutChar>
      loop_until_bit_is_set(UCSR1A, UDRE1);
     588:	e8 ec       	ldi	r30, 0xC8	; 200
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	85 ff       	sbrs	r24, 5
     590:	fd cf       	rjmp	.-6      	; 0x58c <USARTPutChar+0x52>
      UDR1 = c;
     592:	c0 93 ce 00 	sts	0x00CE, r28
      break;
     596:	0b c0       	rjmp	.+22     	; 0x5ae <USARTPutChar+0x74>
    default:
      if (c == '\n') USARTPutChar('\r', stream);
     598:	ca 30       	cpi	r28, 0x0A	; 10
     59a:	11 f4       	brne	.+4      	; 0x5a0 <USARTPutChar+0x66>
     59c:	8d e0       	ldi	r24, 0x0D	; 13
     59e:	cd df       	rcall	.-102    	; 0x53a <USARTPutChar>
      loop_until_bit_is_set(UCSR0A, UDRE0);
     5a0:	e0 ec       	ldi	r30, 0xC0	; 192
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	85 ff       	sbrs	r24, 5
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <USARTPutChar+0x6a>
      UDR0 = c;
     5aa:	c0 93 c6 00 	sts	0x00C6, r28
  if (c == '\n') USARTPutChar('\r', stream);
  loop_until_bit_is_set(UCSRA, UDRE);
  UDR = c;
  return c;
#endif
} // USARTPutChar
     5ae:	8c 2f       	mov	r24, r28
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <USARTGetChar>:
/***************************************************************************//**
Function for receiving data from standard USART by scanf with echo
@param *stream outputstream for echo
@retval received character
*******************************************************************************/
int16_t USARTGetChar(FILE *stream) {
     5b6:	bc 01       	movw	r22, r24
#if defined (__AVR_ATmega2560__)        // stdio sends by USART0
  switch ( usart_stdio) {
     5b8:	80 91 b1 02 	lds	r24, 0x02B1
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	69 f0       	breq	.+26     	; 0x5da <USARTGetChar+0x24>
     5c0:	83 30       	cpi	r24, 0x03	; 3
     5c2:	19 f0       	breq	.+6      	; 0x5ca <USARTGetChar+0x14>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	c9 f4       	brne	.+50     	; 0x5fa <USARTGetChar+0x44>
     5c8:	10 c0       	rjmp	.+32     	; 0x5ea <USARTGetChar+0x34>
    case 3 :
      while (!(UCSR3A & (1<<RXC3)));
     5ca:	e0 e3       	ldi	r30, 0x30	; 48
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	80 81       	ld	r24, Z
     5d0:	88 23       	and	r24, r24
     5d2:	ec f7       	brge	.-6      	; 0x5ce <USARTGetChar+0x18>
      return (int16_t)(USARTPutChar(UDR3, stream)); // echo;
     5d4:	80 91 36 01 	lds	r24, 0x0136
     5d8:	b0 cf       	rjmp	.-160    	; 0x53a <USARTPutChar>
    break;
    case 2 :
      while (!(UCSR2A & (1<<RXC2)));
     5da:	e0 ed       	ldi	r30, 0xD0	; 208
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	88 23       	and	r24, r24
     5e2:	ec f7       	brge	.-6      	; 0x5de <USARTGetChar+0x28>
      return (int16_t)(USARTPutChar(UDR2, stream)); // echo;
     5e4:	80 91 d6 00 	lds	r24, 0x00D6
     5e8:	a8 cf       	rjmp	.-176    	; 0x53a <USARTPutChar>
    break;
    case 1 :
      while (!(UCSR1A & (1<<RXC1)));
     5ea:	e8 ec       	ldi	r30, 0xC8	; 200
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	88 23       	and	r24, r24
     5f2:	ec f7       	brge	.-6      	; 0x5ee <USARTGetChar+0x38>
      return (int16_t)(USARTPutChar(UDR1, stream)); // echo;
     5f4:	80 91 ce 00 	lds	r24, 0x00CE
     5f8:	a0 cf       	rjmp	.-192    	; 0x53a <USARTPutChar>
    break;
    default:
      while (!(UCSR0A & (1<<RXC0)));
     5fa:	e0 ec       	ldi	r30, 0xC0	; 192
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	88 23       	and	r24, r24
     602:	ec f7       	brge	.-6      	; 0x5fe <USARTGetChar+0x48>
      return (int16_t)(USARTPutChar(UDR0, stream)); // echo;
     604:	80 91 c6 00 	lds	r24, 0x00C6
      break;
  }
#endif
} // USARTGetChar
     608:	98 cf       	rjmp	.-208    	; 0x53a <USARTPutChar>

0000060a <USARTInitSTDIO>:
@param uart select one of the controllers USART (0 .. n see datasheet)
@retval - none
*******************************************************************************/
void USARTInitSTDIO (uint8_t uart) {

  if ( uart < 4) {
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	18 f4       	brcc	.+6      	; 0x614 <USARTInitSTDIO+0xa>
    usart_stdio = uart;
     60e:	80 93 b1 02 	sts	0x02B1, r24
     612:	08 95       	ret
  } else {
    usart_stdio = 0;
     614:	10 92 b1 02 	sts	0x02B1, r1
     618:	08 95       	ret

0000061a <USARTInit>:
@param tx_int_enable enables the USARTx-TX-interrupt
@retval - none
*******************************************************************************/
void USARTInit (uint8_t uart, uint32_t baud,
                uint8_t rx_enable, uint8_t rx_int_enable,
                uint8_t tx_enable, uint8_t tx_int_enable ) {
     61a:	2f 92       	push	r2
     61c:	3f 92       	push	r3
     61e:	4f 92       	push	r4
     620:	5f 92       	push	r5
     622:	6f 92       	push	r6
     624:	7f 92       	push	r7
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	ef 92       	push	r14
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	2a 97       	sbiw	r28, 0x0a	; 10
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	92 2f       	mov	r25, r18
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;

  stdout = stdin = &mystdinout;
     64c:	20 e1       	ldi	r18, 0x10	; 16
     64e:	32 e0       	ldi	r19, 0x02	; 2
     650:	30 93 4a 03 	sts	0x034A, r19
     654:	20 93 49 03 	sts	0x0349, r18
     658:	30 93 4c 03 	sts	0x034C, r19
     65c:	20 93 4b 03 	sts	0x034B, r18
        break;
     }
     break;

   case 16000000L :
     switch ( baud ) {
     660:	41 15       	cp	r20, r1
     662:	2b e4       	ldi	r18, 0x4B	; 75
     664:	52 07       	cpc	r21, r18
     666:	61 05       	cpc	r22, r1
     668:	71 05       	cpc	r23, r1
     66a:	71 f1       	breq	.+92     	; 0x6c8 <USARTInit+0xae>
     66c:	90 f4       	brcc	.+36     	; 0x692 <USARTInit+0x78>
     66e:	40 36       	cpi	r20, 0x60	; 96
     670:	29 e0       	ldi	r18, 0x09	; 9
     672:	52 07       	cpc	r21, r18
     674:	61 05       	cpc	r22, r1
     676:	71 05       	cpc	r23, r1
     678:	79 f1       	breq	.+94     	; 0x6d8 <USARTInit+0xbe>
     67a:	40 3c       	cpi	r20, 0xC0	; 192
     67c:	22 e1       	ldi	r18, 0x12	; 18
     67e:	52 07       	cpc	r21, r18
     680:	61 05       	cpc	r22, r1
     682:	71 05       	cpc	r23, r1
     684:	29 f1       	breq	.+74     	; 0x6d0 <USARTInit+0xb6>
     686:	40 3b       	cpi	r20, 0xB0	; 176
     688:	54 40       	sbci	r21, 0x04	; 4
     68a:	61 05       	cpc	r22, r1
     68c:	71 05       	cpc	r23, r1
     68e:	61 f5       	brne	.+88     	; 0x6e8 <USARTInit+0xce>
     690:	27 c0       	rjmp	.+78     	; 0x6e0 <USARTInit+0xc6>
     692:	41 15       	cp	r20, r1
     694:	21 ee       	ldi	r18, 0xE1	; 225
     696:	52 07       	cpc	r21, r18
     698:	61 05       	cpc	r22, r1
     69a:	71 05       	cpc	r23, r1
     69c:	49 f1       	breq	.+82     	; 0x6f0 <USARTInit+0xd6>
     69e:	41 15       	cp	r20, r1
     6a0:	22 ec       	ldi	r18, 0xC2	; 194
     6a2:	52 07       	cpc	r21, r18
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	62 07       	cpc	r22, r18
     6a8:	71 05       	cpc	r23, r1
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <USARTInit+0x9e>
     6ac:	41 15       	cp	r20, r1
     6ae:	56 49       	sbci	r21, 0x96	; 150
     6b0:	61 05       	cpc	r22, r1
     6b2:	71 05       	cpc	r23, r1
     6b4:	c9 f4       	brne	.+50     	; 0x6e8 <USARTInit+0xce>
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <USARTInit+0xa6>
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	20 e1       	ldi	r18, 0x10	; 16
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	1b c0       	rjmp	.+54     	; 0x6f6 <USARTInit+0xdc>
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	23 e3       	ldi	r18, 0x33	; 51
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     6c4:	30 e0       	ldi	r19, 0x00	; 0
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
     6c6:	17 c0       	rjmp	.+46     	; 0x6f6 <USARTInit+0xdc>
#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;
     6c8:	40 e0       	ldi	r20, 0x00	; 0
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
      case 19200 : // 19200bps at 0.2% error see datasheet
        ubrrl = 51; break;
     6ca:	23 e3       	ldi	r18, 0x33	; 51
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     6cc:	30 e0       	ldi	r19, 0x00	; 0
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
      case 19200 : // 19200bps at 0.2% error see datasheet
        ubrrl = 51; break;
     6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <USARTInit+0xdc>
      case 4800 : // 4800bps at -0.1% error see datasheet UBRR = 416
        doubleTransSpeed = 1; ubrrl = 160; ubrrh = 1; break;
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	20 ea       	ldi	r18, 0xA0	; 160
     6d4:	31 e0       	ldi	r19, 0x01	; 1
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <USARTInit+0xdc>
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	20 e4       	ldi	r18, 0x40	; 64
     6dc:	33 e0       	ldi	r19, 0x03	; 3
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <USARTInit+0xdc>
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	22 e8       	ldi	r18, 0x82	; 130
     6e4:	36 e0       	ldi	r19, 0x06	; 6
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <USARTInit+0xdc>
#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;
     6e8:	40 e0       	ldi	r20, 0x00	; 0
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
      default: // 9600bps at 0.2% error see datasheet
        ubrrl = 103; break;
     6ea:	27 e6       	ldi	r18, 0x67	; 103
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     6ec:	30 e0       	ldi	r19, 0x00	; 0
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
      default: // 9600bps at 0.2% error see datasheet
        ubrrl = 103; break;
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <USARTInit+0xdc>
   case 16000000L :
     switch ( baud ) {
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	22 e2       	ldi	r18, 0x22	; 34
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     6f4:	30 e0       	ldi	r19, 0x00	; 0
  /* set frame format: 8data, 1stop bit, no parity */
  UCSRC = (1<<URSEL) /*| (1<<USBS)*/ |(1<<UCSZ1) | (1<<UCSZ0);
#elif defined (__AVR_ATmega2560__)
  /* enable receiver and transmitter */
  /* set frame format: 8data, 1stop bit, no parity */
  switch ( uart ) {
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <USARTInit+0xe2>
     6fa:	46 c0       	rjmp	.+140    	; 0x788 <USARTInit+0x16e>
     6fc:	38 f0       	brcs	.+14     	; 0x70c <USARTInit+0xf2>
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	09 f4       	brne	.+2      	; 0x704 <USARTInit+0xea>
     702:	81 c0       	rjmp	.+258    	; 0x806 <USARTInit+0x1ec>
     704:	83 30       	cpi	r24, 0x03	; 3
     706:	09 f0       	breq	.+2      	; 0x70a <USARTInit+0xf0>
     708:	fb c0       	rjmp	.+502    	; 0x900 <USARTInit+0x2e6>
     70a:	ba c0       	rjmp	.+372    	; 0x880 <USARTInit+0x266>
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
     70c:	44 23       	and	r20, r20
     70e:	31 f0       	breq	.+12     	; 0x71c <USARTInit+0x102>
     710:	e0 ec       	ldi	r30, 0xC0	; 192
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 83       	st	Z, r24
     71a:	02 c0       	rjmp	.+4      	; 0x720 <USARTInit+0x106>
      else                    UCSR0A = 0x00;
     71c:	10 92 c0 00 	sts	0x00C0, r1
      UBRR0H = ubrrh; UBRR0L = ubrrl;
     720:	30 93 c5 00 	sts	0x00C5, r19
     724:	20 93 c4 00 	sts	0x00C4, r18
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	08 9f       	mul	r16, r24
     72c:	80 01       	movw	r16, r0
     72e:	11 24       	eor	r1, r1
     730:	90 fb       	bst	r25, 0
     732:	44 24       	eor	r4, r4
     734:	40 f8       	bld	r4, 0
     736:	51 2c       	mov	r5, r1
     738:	44 0c       	add	r4, r4
     73a:	55 1c       	adc	r5, r5
     73c:	44 0c       	add	r4, r4
     73e:	55 1c       	adc	r5, r5
     740:	44 0c       	add	r4, r4
     742:	55 1c       	adc	r5, r5
     744:	44 0c       	add	r4, r4
     746:	55 1c       	adc	r5, r5
     748:	40 2a       	or	r4, r16
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
     74a:	e0 fa       	bst	r14, 0
     74c:	66 24       	eor	r6, r6
     74e:	60 f8       	bld	r6, 0
     750:	71 2c       	mov	r7, r1
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	66 0c       	add	r6, r6
     758:	77 1c       	adc	r7, r7
     75a:	66 0c       	add	r6, r6
     75c:	77 1c       	adc	r7, r7
  switch ( uart ) {
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
      else                    UCSR0A = 0x00;
      UBRR0H = ubrrh; UBRR0L = ubrrl;
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     75e:	64 28       	or	r6, r4
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
     760:	c0 fa       	bst	r12, 0
     762:	88 24       	eor	r8, r8
     764:	80 f8       	bld	r8, 0
     766:	91 2c       	mov	r9, r1
     768:	00 24       	eor	r0, r0
     76a:	96 94       	lsr	r9
     76c:	87 94       	ror	r8
     76e:	07 94       	ror	r0
     770:	96 94       	lsr	r9
     772:	87 94       	ror	r8
     774:	07 94       	ror	r0
     776:	98 2c       	mov	r9, r8
     778:	80 2c       	mov	r8, r0
  switch ( uart ) {
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
      else                    UCSR0A = 0x00;
      UBRR0H = ubrrh; UBRR0L = ubrrl;
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     77a:	86 28       	or	r8, r6
     77c:	80 92 c1 00 	sts	0x00C1, r8
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
      UCSR0C=0x06;       // 8 Databit see datasheet
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	80 93 c2 00 	sts	0x00C2, r24
      break;
     786:	bc c0       	rjmp	.+376    	; 0x900 <USARTInit+0x2e6>
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
     788:	44 23       	and	r20, r20
     78a:	31 f0       	breq	.+12     	; 0x798 <USARTInit+0x17e>
     78c:	e8 ec       	ldi	r30, 0xC8	; 200
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	82 60       	ori	r24, 0x02	; 2
     794:	80 83       	st	Z, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <USARTInit+0x182>
      else                    UCSR1A = 0x00;
     798:	10 92 c8 00 	sts	0x00C8, r1
      UBRR1H = ubrrh; UBRR1L = ubrrl;
     79c:	30 93 cd 00 	sts	0x00CD, r19
     7a0:	20 93 cc 00 	sts	0x00CC, r18
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     7a4:	e0 e8       	ldi	r30, 0x80	; 128
     7a6:	0e 9f       	mul	r16, r30
     7a8:	80 01       	movw	r16, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	90 fb       	bst	r25, 0
     7ae:	aa 24       	eor	r10, r10
     7b0:	a0 f8       	bld	r10, 0
     7b2:	b1 2c       	mov	r11, r1
     7b4:	aa 0c       	add	r10, r10
     7b6:	bb 1c       	adc	r11, r11
     7b8:	aa 0c       	add	r10, r10
     7ba:	bb 1c       	adc	r11, r11
     7bc:	aa 0c       	add	r10, r10
     7be:	bb 1c       	adc	r11, r11
     7c0:	aa 0c       	add	r10, r10
     7c2:	bb 1c       	adc	r11, r11
     7c4:	a0 2a       	or	r10, r16
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
     7c6:	fe 2d       	mov	r31, r14
     7c8:	f1 70       	andi	r31, 0x01	; 1
     7ca:	f9 87       	std	Y+9, r31	; 0x09
     7cc:	1a 86       	std	Y+10, r1	; 0x0a
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
      break;
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
      else                    UCSR1A = 0x00;
      UBRR1H = ubrrh; UBRR1L = ubrrl;
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     7de:	8a 29       	or	r24, r10
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
     7e0:	ac 2d       	mov	r26, r12
     7e2:	a1 70       	andi	r26, 0x01	; 1
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	00 24       	eor	r0, r0
     7e8:	b6 95       	lsr	r27
     7ea:	a7 95       	ror	r26
     7ec:	07 94       	ror	r0
     7ee:	b6 95       	lsr	r27
     7f0:	a7 95       	ror	r26
     7f2:	07 94       	ror	r0
     7f4:	ba 2f       	mov	r27, r26
     7f6:	a0 2d       	mov	r26, r0
      break;
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
      else                    UCSR1A = 0x00;
      UBRR1H = ubrrh; UBRR1L = ubrrl;
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     7f8:	a8 2b       	or	r26, r24
     7fa:	a0 93 c9 00 	sts	0x00C9, r26
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
      UCSR1C=0x06;       // 8 Databit see datasheet
     7fe:	86 e0       	ldi	r24, 0x06	; 6
     800:	80 93 ca 00 	sts	0x00CA, r24
      break;
     804:	7d c0       	rjmp	.+250    	; 0x900 <USARTInit+0x2e6>
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
     806:	44 23       	and	r20, r20
     808:	31 f0       	breq	.+12     	; 0x816 <USARTInit+0x1fc>
     80a:	a0 ed       	ldi	r26, 0xD0	; 208
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	8c 91       	ld	r24, X
     810:	82 60       	ori	r24, 0x02	; 2
     812:	8c 93       	st	X, r24
     814:	02 c0       	rjmp	.+4      	; 0x81a <USARTInit+0x200>
      else                    UCSR2A = 0x00;
     816:	10 92 d0 00 	sts	0x00D0, r1
      UBRR2H = ubrrh; UBRR2L = ubrrl;
     81a:	30 93 d5 00 	sts	0x00D5, r19
     81e:	20 93 d4 00 	sts	0x00D4, r18
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     822:	20 e8       	ldi	r18, 0x80	; 128
     824:	02 9f       	mul	r16, r18
     826:	80 01       	movw	r16, r0
     828:	11 24       	eor	r1, r1
     82a:	e9 2f       	mov	r30, r25
     82c:	e1 70       	andi	r30, 0x01	; 1
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	e2 95       	swap	r30
     832:	f2 95       	swap	r31
     834:	f0 7f       	andi	r31, 0xF0	; 240
     836:	fe 27       	eor	r31, r30
     838:	e0 7f       	andi	r30, 0xF0	; 240
     83a:	fe 27       	eor	r31, r30
     83c:	e0 2b       	or	r30, r16
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
     83e:	e0 fa       	bst	r14, 0
     840:	22 24       	eor	r2, r2
     842:	20 f8       	bld	r2, 0
     844:	31 2c       	mov	r3, r1
     846:	22 0c       	add	r2, r2
     848:	33 1c       	adc	r3, r3
     84a:	22 0c       	add	r2, r2
     84c:	33 1c       	adc	r3, r3
     84e:	22 0c       	add	r2, r2
     850:	33 1c       	adc	r3, r3
      break;
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
      else                    UCSR2A = 0x00;
      UBRR2H = ubrrh; UBRR2L = ubrrl;
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     852:	2e 2a       	or	r2, r30
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
     854:	8c 2d       	mov	r24, r12
     856:	81 70       	andi	r24, 0x01	; 1
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	1a 82       	std	Y+2, r1	; 0x02
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	00 24       	eor	r0, r0
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	07 94       	ror	r0
     868:	96 95       	lsr	r25
     86a:	87 95       	ror	r24
     86c:	07 94       	ror	r0
     86e:	98 2f       	mov	r25, r24
     870:	80 2d       	mov	r24, r0
      break;
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
      else                    UCSR2A = 0x00;
      UBRR2H = ubrrh; UBRR2L = ubrrl;
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     872:	82 29       	or	r24, r2
     874:	80 93 d1 00 	sts	0x00D1, r24
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
      UCSR2C=0x06;       // 8 Databit see datasheet
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	80 93 d2 00 	sts	0x00D2, r24
      break;
     87e:	40 c0       	rjmp	.+128    	; 0x900 <USARTInit+0x2e6>
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
     880:	44 23       	and	r20, r20
     882:	31 f0       	breq	.+12     	; 0x890 <USARTInit+0x276>
     884:	e0 e3       	ldi	r30, 0x30	; 48
     886:	f1 e0       	ldi	r31, 0x01	; 1
     888:	80 81       	ld	r24, Z
     88a:	82 60       	ori	r24, 0x02	; 2
     88c:	80 83       	st	Z, r24
     88e:	02 c0       	rjmp	.+4      	; 0x894 <USARTInit+0x27a>
      else                    UCSR3A = 0x00;
     890:	10 92 30 01 	sts	0x0130, r1
      UBRR3H = ubrrh; UBRR3L = ubrrl;
     894:	30 93 35 01 	sts	0x0135, r19
     898:	20 93 34 01 	sts	0x0134, r18
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     89c:	e0 e8       	ldi	r30, 0x80	; 128
     89e:	0e 9f       	mul	r16, r30
     8a0:	80 01       	movw	r16, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	91 70       	andi	r25, 0x01	; 1
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	1c 82       	std	Y+4, r1	; 0x04
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	9c 81       	ldd	r25, Y+4	; 0x04
     8ae:	82 95       	swap	r24
     8b0:	92 95       	swap	r25
     8b2:	90 7f       	andi	r25, 0xF0	; 240
     8b4:	98 27       	eor	r25, r24
     8b6:	80 7f       	andi	r24, 0xF0	; 240
     8b8:	98 27       	eor	r25, r24
     8ba:	80 2b       	or	r24, r16
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
     8bc:	fe 2d       	mov	r31, r14
     8be:	f1 70       	andi	r31, 0x01	; 1
     8c0:	fd 83       	std	Y+5, r31	; 0x05
     8c2:	1e 82       	std	Y+6, r1	; 0x06
     8c4:	2d 81       	ldd	r18, Y+5	; 0x05
     8c6:	3e 81       	ldd	r19, Y+6	; 0x06
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	22 0f       	add	r18, r18
     8d2:	33 1f       	adc	r19, r19
      break;
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
      else                    UCSR3A = 0x00;
      UBRR3H = ubrrh; UBRR3L = ubrrl;
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     8d4:	28 2b       	or	r18, r24
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
     8d6:	8c 2d       	mov	r24, r12
     8d8:	81 70       	andi	r24, 0x01	; 1
     8da:	8f 83       	std	Y+7, r24	; 0x07
     8dc:	18 86       	std	Y+8, r1	; 0x08
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	98 85       	ldd	r25, Y+8	; 0x08
     8e2:	00 24       	eor	r0, r0
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	07 94       	ror	r0
     8ea:	96 95       	lsr	r25
     8ec:	87 95       	ror	r24
     8ee:	07 94       	ror	r0
     8f0:	98 2f       	mov	r25, r24
     8f2:	80 2d       	mov	r24, r0
      break;
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
      else                    UCSR3A = 0x00;
      UBRR3H = ubrrh; UBRR3L = ubrrl;
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     8f4:	82 2b       	or	r24, r18
     8f6:	80 93 31 01 	sts	0x0131, r24
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
      UCSR3C=0x06;       // 8 Databit see datasheet
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	80 93 32 01 	sts	0x0132, r24
    default: break;
  }
#else
  #warning "MCU unknown"
#endif
} // USART_init
     900:	2a 96       	adiw	r28, 0x0a	; 10
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ef 90       	pop	r14
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	08 95       	ret

0000092e <wiinunchuck_getjoyX>:
	return (int)wiinunchuck_joyX;

	#else

	#if WIINUNCHUCK_JOYCENTERB == 1
	int joyX = (int)wiinunchuck_joyX;
     92e:	20 91 bb 02 	lds	r18, 0x02BB
     932:	30 e0       	ldi	r19, 0x00	; 0
	if(joyX <= WIINUNCHUCK_CENTERJOYX)
     934:	2f 38       	cpi	r18, 0x8F	; 143
     936:	31 05       	cpc	r19, r1
     938:	64 f4       	brge	.+24     	; 0x952 <wiinunchuck_getjoyX+0x24>
		joyX = (joyX - WIINUNCHUCK_INMINJOYX) * (127 - 0) / (WIINUNCHUCK_CENTERJOYX - WIINUNCHUCK_INMINJOYX) + 0;
     93a:	c9 01       	movw	r24, r18
     93c:	96 95       	lsr	r25
     93e:	98 2f       	mov	r25, r24
     940:	88 27       	eor	r24, r24
     942:	97 95       	ror	r25
     944:	87 95       	ror	r24
     946:	82 1b       	sub	r24, r18
     948:	93 0b       	sbc	r25, r19
     94a:	6e e8       	ldi	r22, 0x8E	; 142
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	54 d1       	rcall	.+680    	; 0xbf8 <__divmodhi4>
     950:	0d c0       	rjmp	.+26     	; 0x96c <wiinunchuck_getjoyX+0x3e>
	else
		joyX = (joyX - WIINUNCHUCK_CENTERJOYX) * (255 - 127) / (WIINUNCHUCK_INMAXJOYX - WIINUNCHUCK_CENTERJOYX) + 127 - 1;
     952:	2e 58       	subi	r18, 0x8E	; 142
     954:	31 09       	sbc	r19, r1
     956:	c9 01       	movw	r24, r18
     958:	96 95       	lsr	r25
     95a:	98 2f       	mov	r25, r24
     95c:	88 27       	eor	r24, r24
     95e:	97 95       	ror	r25
     960:	87 95       	ror	r24
     962:	61 e7       	ldi	r22, 0x71	; 113
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	48 d1       	rcall	.+656    	; 0xbf8 <__divmodhi4>
     968:	62 58       	subi	r22, 0x82	; 130
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
	return joyX-127;
     96c:	6f 57       	subi	r22, 0x7F	; 127
     96e:	71 09       	sbc	r23, r1
	#else
	return (int)wiinunchuck_joyX - WIINUNCHUCK_DEFAULTZEROJOYX;
	#endif

	#endif
}
     970:	86 2f       	mov	r24, r22
     972:	97 2f       	mov	r25, r23
     974:	08 95       	ret

00000976 <wiinunchuck_getjoyY>:
	return (int)wiinunchuck_joyY;

	#else

	#if WIINUNCHUCK_JOYCENTERB == 1
	int joyY = (int)wiinunchuck_joyY;
     976:	20 91 ba 02 	lds	r18, 0x02BA
     97a:	30 e0       	ldi	r19, 0x00	; 0
	if(joyY <= WIINUNCHUCK_CENTERJOYY)
     97c:	20 38       	cpi	r18, 0x80	; 128
     97e:	31 05       	cpc	r19, r1
     980:	64 f4       	brge	.+24     	; 0x99a <wiinunchuck_getjoyY+0x24>
		joyY = (joyY - WIINUNCHUCK_INMINJOYY) * (127 - 0) / (WIINUNCHUCK_CENTERJOYY - WIINUNCHUCK_INMINJOYY) + 0;
     982:	c9 01       	movw	r24, r18
     984:	96 95       	lsr	r25
     986:	98 2f       	mov	r25, r24
     988:	88 27       	eor	r24, r24
     98a:	97 95       	ror	r25
     98c:	87 95       	ror	r24
     98e:	82 1b       	sub	r24, r18
     990:	93 0b       	sbc	r25, r19
     992:	6f e7       	ldi	r22, 0x7F	; 127
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	30 d1       	rcall	.+608    	; 0xbf8 <__divmodhi4>
     998:	12 c0       	rjmp	.+36     	; 0x9be <wiinunchuck_getjoyY+0x48>
	else
		joyY = (joyY - WIINUNCHUCK_CENTERJOYY) * (255 - 127) / (WIINUNCHUCK_INMAXJOYY - WIINUNCHUCK_CENTERJOYY) + 127 - 1;
     99a:	2f 57       	subi	r18, 0x7F	; 127
     99c:	31 09       	sbc	r19, r1
     99e:	b9 01       	movw	r22, r18
     9a0:	76 95       	lsr	r23
     9a2:	76 2f       	mov	r23, r22
     9a4:	66 27       	eor	r22, r22
     9a6:	77 95       	ror	r23
     9a8:	67 95       	ror	r22
     9aa:	30 ff       	sbrs	r19, 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <wiinunchuck_getjoyY+0x3c>
     9ae:	61 58       	subi	r22, 0x81	; 129
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	66 0f       	add	r22, r22
     9b4:	67 2f       	mov	r22, r23
     9b6:	66 1f       	adc	r22, r22
     9b8:	77 0b       	sbc	r23, r23
     9ba:	62 58       	subi	r22, 0x82	; 130
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
	return joyY-127;
     9be:	6f 57       	subi	r22, 0x7F	; 127
     9c0:	71 09       	sbc	r23, r1
	#else
	return (int)wiinunchuck_joyY - WIINUNCHUCK_DEFAULTZEROJOYY;
	#endif

	#endif
}
     9c2:	86 2f       	mov	r24, r22
     9c4:	97 2f       	mov	r25, r23
     9c6:	08 95       	ret

000009c8 <wiinunchuck_getbuttonZ>:
 */
uint8_t wiinunchuck_getbuttonZ() {
	#if WIINUNCHUCK_PULSEBUTTON == 1
	return (wiinunchuck_buttonZ && !wiinunchuck_lastbuttonZ);
	#else
	return wiinunchuck_buttonZ;
     9c8:	80 91 b9 02 	lds	r24, 0x02B9
	#endif
}
     9cc:	08 95       	ret

000009ce <wiinunchuck_getbuttonC>:
 */
uint8_t wiinunchuck_getbuttonC() {
	#if WIINUNCHUCK_PULSEBUTTON == 1
	return (wiinunchuck_buttonC && !wiinunchuck_lastbuttonC);
	#else
	return wiinunchuck_buttonC;
     9ce:	80 91 b8 02 	lds	r24, 0x02B8
	#endif
}
     9d2:	08 95       	ret

000009d4 <wiinunchuck_getangleX>:
 */
int wiinunchuck_getangleX() {
	#if WIINUNCHUCK_GETNONCALIBRATED == 1
	return wiinunchuck_angleX;
	#else
	return wiinunchuck_angleX - WIINUNCHUCK_ZEROANGLEX;
     9d4:	20 91 b6 02 	lds	r18, 0x02B6
     9d8:	30 91 b7 02 	lds	r19, 0x02B7
     9dc:	2f 50       	subi	r18, 0x0F	; 15
     9de:	32 40       	sbci	r19, 0x02	; 2
	#endif
}
     9e0:	82 2f       	mov	r24, r18
     9e2:	93 2f       	mov	r25, r19
     9e4:	08 95       	ret

000009e6 <wiinunchuck_getangleY>:
 */
int wiinunchuck_getangleY() {
	#if WIINUNCHUCK_GETNONCALIBRATED == 1
	return wiinunchuck_angleY;
	#else
	return wiinunchuck_angleY - WIINUNCHUCK_ZEROANGLEY;
     9e6:	20 91 b4 02 	lds	r18, 0x02B4
     9ea:	30 91 b5 02 	lds	r19, 0x02B5
     9ee:	23 51       	subi	r18, 0x13	; 19
     9f0:	32 40       	sbci	r19, 0x02	; 2
	#endif
}
     9f2:	82 2f       	mov	r24, r18
     9f4:	93 2f       	mov	r25, r19
     9f6:	08 95       	ret

000009f8 <wiinunchuck_getangleZ>:

/*
 * get angle Z
 */
int wiinunchuck_getangleZ() {
	return wiinunchuck_angleZ - WIINUNCHUCK_ZEROANGLEZ;
     9f8:	20 91 b2 02 	lds	r18, 0x02B2
     9fc:	30 91 b3 02 	lds	r19, 0x02B3
     a00:	22 51       	subi	r18, 0x12	; 18
     a02:	32 40       	sbci	r19, 0x02	; 2
}
     a04:	82 2f       	mov	r24, r18
     a06:	93 2f       	mov	r25, r19
     a08:	08 95       	ret

00000a0a <wiinunchuck_avaragefilter>:

#if WIINUNCHUCK_ANGLEFILTER == 1
/*
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	db 01       	movw	r26, r22
     a10:	fb 01       	movw	r30, r22
     a12:	45 e1       	ldi	r20, 0x15	; 21
	uint8_t i=0;
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
     a14:	22 81       	ldd	r18, Z+2	; 0x02
     a16:	33 81       	ldd	r19, Z+3	; 0x03
     a18:	21 93       	st	Z+, r18
     a1a:	31 93       	st	Z+, r19
     a1c:	41 50       	subi	r20, 0x01	; 1
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     a1e:	d1 f7       	brne	.-12     	; 0xa14 <wiinunchuck_avaragefilter+0xa>
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
     a20:	fb 01       	movw	r30, r22
     a22:	91 a7       	std	Z+41, r25	; 0x29
     a24:	80 a7       	std	Z+40, r24	; 0x28
/*
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
	uint8_t i=0;
	long sum=0;
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	cb 01       	movw	r24, r22
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		sum += wiinunchuck_avarageangle[i];
     a2c:	0d 91       	ld	r16, X+
     a2e:	1d 91       	ld	r17, X+
     a30:	22 27       	eor	r18, r18
     a32:	17 fd       	sbrc	r17, 7
     a34:	20 95       	com	r18
     a36:	32 2f       	mov	r19, r18
     a38:	60 0f       	add	r22, r16
     a3a:	71 1f       	adc	r23, r17
     a3c:	82 1f       	adc	r24, r18
     a3e:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     a40:	4f 5f       	subi	r20, 0xFF	; 255
     a42:	45 31       	cpi	r20, 0x15	; 21
     a44:	99 f7       	brne	.-26     	; 0xa2c <wiinunchuck_avaragefilter+0x22>
		sum += wiinunchuck_avarageangle[i];
	}
	return (sum/WIINUNCHUCK_ANGLEAVARAGECOEF);
     a46:	25 e1       	ldi	r18, 0x15	; 21
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	e7 d0       	rcall	.+462    	; 0xc1e <__divmodsi4>
}
     a50:	82 2f       	mov	r24, r18
     a52:	93 2f       	mov	r25, r19
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <wiinunchuck_update>:
#endif

/*
 * get new data
 */
void wiinunchuck_update() {
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <wiinunchuck_update+0x16>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <wiinunchuck_update+0x18>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
	uint8_t i=0;
	uint8_t buff[WIINUNCHUCK_READBYTES];
	memset(buff, 0, sizeof(buff));
     a76:	ee 24       	eor	r14, r14
     a78:	e3 94       	inc	r14
     a7a:	f1 2c       	mov	r15, r1
     a7c:	ec 0e       	add	r14, r28
     a7e:	fd 1e       	adc	r15, r29
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	f7 01       	movw	r30, r14
     a84:	11 92       	st	Z+, r1
     a86:	8a 95       	dec	r24
     a88:	e9 f7       	brne	.-6      	; 0xa84 <wiinunchuck_update+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8a:	8f e3       	ldi	r24, 0x3F	; 63
     a8c:	96 e0       	ldi	r25, 0x06	; 6
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <wiinunchuck_update+0x34>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <wiinunchuck_update+0x3a>
     a94:	00 00       	nop

	//request data
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     a96:	84 ea       	ldi	r24, 0xA4	; 164
     a98:	f7 dc       	rcall	.-1554   	; 0x488 <i2c_start_wait>
	i2c_write(0x00);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	26 dd       	rcall	.-1460   	; 0x4ea <i2c_write>
	i2c_stop();
     a9e:	1c dd       	rcall	.-1480   	; 0x4d8 <i2c_stop>
     aa0:	ef e3       	ldi	r30, 0x3F	; 63
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <wiinunchuck_update+0x4a>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <wiinunchuck_update+0x50>
     aaa:	00 00       	nop
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
     aac:	85 ea       	ldi	r24, 0xA5	; 165
     aae:	ec dc       	rcall	.-1576   	; 0x488 <i2c_start_wait>
     ab0:	87 01       	movw	r16, r14
#endif

/*
 * get new data
 */
void wiinunchuck_update() {
     ab2:	6e 01       	movw	r12, r28
     ab4:	f7 e0       	ldi	r31, 0x07	; 7
     ab6:	cf 0e       	add	r12, r31
     ab8:	d1 1c       	adc	r13, r1
     aba:	5e 01       	movw	r10, r28
     abc:	36 e0       	ldi	r19, 0x06	; 6
     abe:	a3 0e       	add	r10, r19
     ac0:	b1 1c       	adc	r11, r1
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <wiinunchuck_update+0x76>
	i2c_write(0x00);
	i2c_stop();
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
		if(i==WIINUNCHUCK_READBYTES-1)
     ac4:	ea 14       	cp	r14, r10
     ac6:	fb 04       	cpc	r15, r11
     ac8:	19 f4       	brne	.+6      	; 0xad0 <wiinunchuck_update+0x76>
			buff[i] = i2c_readNak();
     aca:	2c dd       	rcall	.-1448   	; 0x524 <i2c_readNak>
     acc:	8e 83       	std	Y+6, r24	; 0x06
     ace:	07 c0       	rjmp	.+14     	; 0xade <wiinunchuck_update+0x84>
		else
			buff[i] = i2c_readAck();
     ad0:	1e dd       	rcall	.-1476   	; 0x50e <i2c_readAck>
     ad2:	f7 01       	movw	r30, r14
     ad4:	81 93       	st	Z+, r24
     ad6:	7f 01       	movw	r14, r30
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
	i2c_write(0x00);
	i2c_stop();
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     ad8:	ec 15       	cp	r30, r12
     ada:	fd 05       	cpc	r31, r13
     adc:	99 f7       	brne	.-26     	; 0xac4 <wiinunchuck_update+0x6a>
		if(i==WIINUNCHUCK_READBYTES-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     ade:	fc dc       	rcall	.-1544   	; 0x4d8 <i2c_stop>
     ae0:	8f e3       	ldi	r24, 0x3F	; 63
     ae2:	96 e0       	ldi	r25, 0x06	; 6
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <wiinunchuck_update+0x8a>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <wiinunchuck_update+0x90>
     aea:	00 00       	nop
	_delay_us(400);

	//decodebyte
	#if WIINUNCHUCK_DECODEBYTE == 1
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
		buff[i] = wiinunchuck_decode(buff[i]);
     aec:	97 e1       	ldi	r25, 0x17	; 23
     aee:	f8 01       	movw	r30, r16
     af0:	80 81       	ld	r24, Z
     af2:	89 27       	eor	r24, r25
     af4:	89 5e       	subi	r24, 0xE9	; 233
     af6:	81 93       	st	Z+, r24
     af8:	8f 01       	movw	r16, r30
	i2c_stop();
	_delay_us(400);

	//decodebyte
	#if WIINUNCHUCK_DECODEBYTE == 1
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     afa:	ec 15       	cp	r30, r12
     afc:	fd 05       	cpc	r31, r13
     afe:	b9 f7       	brne	.-18     	; 0xaee <wiinunchuck_update+0x94>
	wiinunchuck_lastbuttonZ = wiinunchuck_buttonZ;
	wiinunchuck_lastbuttonC = wiinunchuck_buttonC;
	#endif

	//get joypad
	wiinunchuck_joyX = buff[0];
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	80 93 bb 02 	sts	0x02BB, r24
	wiinunchuck_joyY = buff[1];
     b06:	8a 81       	ldd	r24, Y+2	; 0x02
     b08:	80 93 ba 02 	sts	0x02BA, r24

	//get button
	wiinunchuck_buttonZ = !(buff[5] & 0b00000001);
     b0c:	8e 81       	ldd	r24, Y+6	; 0x06
     b0e:	98 2f       	mov	r25, r24
     b10:	90 95       	com	r25
     b12:	91 70       	andi	r25, 0x01	; 1
     b14:	90 93 b9 02 	sts	0x02B9, r25
	wiinunchuck_buttonC = !((buff[5] & 0b00000010) >> 1);
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	81 fd       	sbrc	r24, 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 b8 02 	sts	0x02B8, r25

	//get angle
	wiinunchuck_angleX = (buff[2] << 2) + ((buff[5] & (0b00000011 << (1*2)) >> (1*2)));
     b22:	83 70       	andi	r24, 0x03	; 3
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	2b 81       	ldd	r18, Y+3	; 0x03
     b28:	ac 01       	movw	r20, r24
     b2a:	64 e0       	ldi	r22, 0x04	; 4
     b2c:	26 9f       	mul	r18, r22
     b2e:	40 0d       	add	r20, r0
     b30:	51 1d       	adc	r21, r1
     b32:	11 24       	eor	r1, r1
     b34:	50 93 b7 02 	sts	0x02B7, r21
     b38:	40 93 b6 02 	sts	0x02B6, r20
	wiinunchuck_angleY = (buff[3] << 2) + ((buff[5] & (0b00000011 << (2*2)) >> (2*2)));
     b3c:	2c 81       	ldd	r18, Y+4	; 0x04
     b3e:	fc 01       	movw	r30, r24
     b40:	44 e0       	ldi	r20, 0x04	; 4
     b42:	24 9f       	mul	r18, r20
     b44:	e0 0d       	add	r30, r0
     b46:	f1 1d       	adc	r31, r1
     b48:	11 24       	eor	r1, r1
     b4a:	f0 93 b5 02 	sts	0x02B5, r31
     b4e:	e0 93 b4 02 	sts	0x02B4, r30
	wiinunchuck_angleZ = (buff[4] << 2) + ((buff[5] & (0b00000011 << (3*2)) >> (3*2)));
     b52:	2d 81       	ldd	r18, Y+5	; 0x05
     b54:	54 e0       	ldi	r21, 0x04	; 4
     b56:	25 9f       	mul	r18, r21
     b58:	80 0d       	add	r24, r0
     b5a:	91 1d       	adc	r25, r1
     b5c:	11 24       	eor	r1, r1
     b5e:	90 93 b3 02 	sts	0x02B3, r25
     b62:	80 93 b2 02 	sts	0x02B2, r24

	//filter angle
	#if WIINUNCHUCK_ANGLEFILTER == 1
	wiinunchuck_angleX = wiinunchuck_avaragefilter(wiinunchuck_angleX, (int *)wiinunchuck_avarageangleX);
     b66:	80 91 b6 02 	lds	r24, 0x02B6
     b6a:	90 91 b7 02 	lds	r25, 0x02B7
     b6e:	65 ef       	ldi	r22, 0xF5	; 245
     b70:	72 e0       	ldi	r23, 0x02	; 2
     b72:	4b df       	rcall	.-362    	; 0xa0a <wiinunchuck_avaragefilter>
     b74:	90 93 b7 02 	sts	0x02B7, r25
     b78:	80 93 b6 02 	sts	0x02B6, r24
	wiinunchuck_angleY = wiinunchuck_avaragefilter(wiinunchuck_angleY, (int *)wiinunchuck_avarageangleY);
     b7c:	80 91 b4 02 	lds	r24, 0x02B4
     b80:	90 91 b5 02 	lds	r25, 0x02B5
     b84:	6b ec       	ldi	r22, 0xCB	; 203
     b86:	72 e0       	ldi	r23, 0x02	; 2
     b88:	40 df       	rcall	.-384    	; 0xa0a <wiinunchuck_avaragefilter>
     b8a:	90 93 b5 02 	sts	0x02B5, r25
     b8e:	80 93 b4 02 	sts	0x02B4, r24
	wiinunchuck_angleZ = wiinunchuck_avaragefilter(wiinunchuck_angleZ, (int *)wiinunchuck_avarageangleZ);
     b92:	80 91 b2 02 	lds	r24, 0x02B2
     b96:	90 91 b3 02 	lds	r25, 0x02B3
     b9a:	6f e1       	ldi	r22, 0x1F	; 31
     b9c:	73 e0       	ldi	r23, 0x03	; 3
     b9e:	35 df       	rcall	.-406    	; 0xa0a <wiinunchuck_avaragefilter>
     ba0:	90 93 b3 02 	sts	0x02B3, r25
     ba4:	80 93 b2 02 	sts	0x02B2, r24
	#endif
}
     ba8:	26 96       	adiw	r28, 0x06	; 6
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	08 95       	ret

00000bca <wiinunchuck_init>:
 * init wiinunchuck
 */
void wiinunchuck_init() {
	#if WIINUNCHUCK_I2CINIT == 1
	//init i2c
	i2c_init();
     bca:	58 dc       	rcall	.-1872   	; 0x47c <i2c_init>
     bcc:	8f e8       	ldi	r24, 0x8F	; 143
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <wiinunchuck_init+0x6>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <wiinunchuck_init+0xc>
     bd6:	00 00       	nop
	#endif

	//standard init: 0x40 -> 0x00
	//alternative init: 0xF0 -> 0x55 followed by 0xFB -> 0x00, lets us use 3rd party nunchucks
	//no longer need to decode bytes in _nunchuk_decode_byte
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     bd8:	84 ea       	ldi	r24, 0xA4	; 164
     bda:	56 dc       	rcall	.-1876   	; 0x488 <i2c_start_wait>
	i2c_write(0x40);	//0xF0
     bdc:	80 e4       	ldi	r24, 0x40	; 64
     bde:	85 dc       	rcall	.-1782   	; 0x4ea <i2c_write>
	i2c_write(0x00);	//0x55
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	83 dc       	rcall	.-1786   	; 0x4ea <i2c_write>
	i2c_stop();
     be4:	79 dc       	rcall	.-1806   	; 0x4d8 <i2c_stop>
	printf("after stop");
     be6:	8c e9       	ldi	r24, 0x9C	; 156
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	68 d0       	rcall	.+208    	; 0xcc0 <printf>
	i2c_write(0x00);	//0x00
	i2c_stop();
	//update
	printf("before update");
	*/
	wiinunchuck_update();
     bf0:	34 df       	rcall	.-408    	; 0xa5a <wiinunchuck_update>
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	08 95       	ret

00000bf8 <__divmodhi4>:
     bf8:	97 fb       	bst	r25, 7
     bfa:	07 2e       	mov	r0, r23
     bfc:	16 f4       	brtc	.+4      	; 0xc02 <__divmodhi4+0xa>
     bfe:	00 94       	com	r0
     c00:	06 d0       	rcall	.+12     	; 0xc0e <__divmodhi4_neg1>
     c02:	77 fd       	sbrc	r23, 7
     c04:	08 d0       	rcall	.+16     	; 0xc16 <__divmodhi4_neg2>
     c06:	26 d0       	rcall	.+76     	; 0xc54 <__udivmodhi4>
     c08:	07 fc       	sbrc	r0, 7
     c0a:	05 d0       	rcall	.+10     	; 0xc16 <__divmodhi4_neg2>
     c0c:	3e f4       	brtc	.+14     	; 0xc1c <__divmodhi4_exit>

00000c0e <__divmodhi4_neg1>:
     c0e:	90 95       	com	r25
     c10:	81 95       	neg	r24
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	08 95       	ret

00000c16 <__divmodhi4_neg2>:
     c16:	70 95       	com	r23
     c18:	61 95       	neg	r22
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c1c <__divmodhi4_exit>:
     c1c:	08 95       	ret

00000c1e <__divmodsi4>:
     c1e:	05 2e       	mov	r0, r21
     c20:	97 fb       	bst	r25, 7
     c22:	16 f4       	brtc	.+4      	; 0xc28 <__divmodsi4+0xa>
     c24:	00 94       	com	r0
     c26:	06 d0       	rcall	.+12     	; 0xc34 <__divmodsi4_neg1>
     c28:	57 fd       	sbrc	r21, 7
     c2a:	0c d0       	rcall	.+24     	; 0xc44 <__divmodsi4_neg2>
     c2c:	27 d0       	rcall	.+78     	; 0xc7c <__udivmodsi4>
     c2e:	07 fc       	sbrc	r0, 7
     c30:	09 d0       	rcall	.+18     	; 0xc44 <__divmodsi4_neg2>
     c32:	7e f4       	brtc	.+30     	; 0xc52 <__divmodsi4_exit>

00000c34 <__divmodsi4_neg1>:
     c34:	90 95       	com	r25
     c36:	80 95       	com	r24
     c38:	70 95       	com	r23
     c3a:	61 95       	neg	r22
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	8f 4f       	sbci	r24, 0xFF	; 255
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	08 95       	ret

00000c44 <__divmodsi4_neg2>:
     c44:	50 95       	com	r21
     c46:	40 95       	com	r20
     c48:	30 95       	com	r19
     c4a:	21 95       	neg	r18
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	4f 4f       	sbci	r20, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255

00000c52 <__divmodsi4_exit>:
     c52:	08 95       	ret

00000c54 <__udivmodhi4>:
     c54:	aa 1b       	sub	r26, r26
     c56:	bb 1b       	sub	r27, r27
     c58:	51 e1       	ldi	r21, 0x11	; 17
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <__udivmodhi4_ep>

00000c5c <__udivmodhi4_loop>:
     c5c:	aa 1f       	adc	r26, r26
     c5e:	bb 1f       	adc	r27, r27
     c60:	a6 17       	cp	r26, r22
     c62:	b7 07       	cpc	r27, r23
     c64:	10 f0       	brcs	.+4      	; 0xc6a <__udivmodhi4_ep>
     c66:	a6 1b       	sub	r26, r22
     c68:	b7 0b       	sbc	r27, r23

00000c6a <__udivmodhi4_ep>:
     c6a:	88 1f       	adc	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	5a 95       	dec	r21
     c70:	a9 f7       	brne	.-22     	; 0xc5c <__udivmodhi4_loop>
     c72:	80 95       	com	r24
     c74:	90 95       	com	r25
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	08 95       	ret

00000c7c <__udivmodsi4>:
     c7c:	a1 e2       	ldi	r26, 0x21	; 33
     c7e:	1a 2e       	mov	r1, r26
     c80:	aa 1b       	sub	r26, r26
     c82:	bb 1b       	sub	r27, r27
     c84:	fd 01       	movw	r30, r26
     c86:	0d c0       	rjmp	.+26     	; 0xca2 <__udivmodsi4_ep>

00000c88 <__udivmodsi4_loop>:
     c88:	aa 1f       	adc	r26, r26
     c8a:	bb 1f       	adc	r27, r27
     c8c:	ee 1f       	adc	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	a2 17       	cp	r26, r18
     c92:	b3 07       	cpc	r27, r19
     c94:	e4 07       	cpc	r30, r20
     c96:	f5 07       	cpc	r31, r21
     c98:	20 f0       	brcs	.+8      	; 0xca2 <__udivmodsi4_ep>
     c9a:	a2 1b       	sub	r26, r18
     c9c:	b3 0b       	sbc	r27, r19
     c9e:	e4 0b       	sbc	r30, r20
     ca0:	f5 0b       	sbc	r31, r21

00000ca2 <__udivmodsi4_ep>:
     ca2:	66 1f       	adc	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 1f       	adc	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	1a 94       	dec	r1
     cac:	69 f7       	brne	.-38     	; 0xc88 <__udivmodsi4_loop>
     cae:	60 95       	com	r22
     cb0:	70 95       	com	r23
     cb2:	80 95       	com	r24
     cb4:	90 95       	com	r25
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	bd 01       	movw	r22, r26
     cbc:	cf 01       	movw	r24, r30
     cbe:	08 95       	ret

00000cc0 <printf>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	fe 01       	movw	r30, r28
     cca:	36 96       	adiw	r30, 0x06	; 6
     ccc:	61 91       	ld	r22, Z+
     cce:	71 91       	ld	r23, Z+
     cd0:	af 01       	movw	r20, r30
     cd2:	80 91 4b 03 	lds	r24, 0x034B
     cd6:	90 91 4c 03 	lds	r25, 0x034C
     cda:	32 d0       	rcall	.+100    	; 0xd40 <vfprintf>
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <puts>:
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	8c 01       	movw	r16, r24
     cec:	e0 91 4b 03 	lds	r30, 0x034B
     cf0:	f0 91 4c 03 	lds	r31, 0x034C
     cf4:	83 81       	ldd	r24, Z+3	; 0x03
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	1b c0       	rjmp	.+54     	; 0xd30 <puts+0x4e>
     cfa:	c0 e0       	ldi	r28, 0x00	; 0
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <puts+0x28>
     d00:	19 95       	eicall
     d02:	89 2b       	or	r24, r25
     d04:	11 f0       	breq	.+4      	; 0xd0a <puts+0x28>
     d06:	cf ef       	ldi	r28, 0xFF	; 255
     d08:	df ef       	ldi	r29, 0xFF	; 255
     d0a:	f8 01       	movw	r30, r16
     d0c:	81 91       	ld	r24, Z+
     d0e:	8f 01       	movw	r16, r30
     d10:	60 91 4b 03 	lds	r22, 0x034B
     d14:	70 91 4c 03 	lds	r23, 0x034C
     d18:	db 01       	movw	r26, r22
     d1a:	18 96       	adiw	r26, 0x08	; 8
     d1c:	ed 91       	ld	r30, X+
     d1e:	fc 91       	ld	r31, X
     d20:	19 97       	sbiw	r26, 0x09	; 9
     d22:	81 11       	cpse	r24, r1
     d24:	ed cf       	rjmp	.-38     	; 0xd00 <puts+0x1e>
     d26:	8a e0       	ldi	r24, 0x0A	; 10
     d28:	19 95       	eicall
     d2a:	89 2b       	or	r24, r25
     d2c:	09 f4       	brne	.+2      	; 0xd30 <puts+0x4e>
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <puts+0x52>
     d30:	cf ef       	ldi	r28, 0xFF	; 255
     d32:	df ef       	ldi	r29, 0xFF	; 255
     d34:	ce 01       	movw	r24, r28
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <vfprintf>:
     d40:	2f 92       	push	r2
     d42:	3f 92       	push	r3
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	2c 97       	sbiw	r28, 0x0c	; 12
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	7c 01       	movw	r14, r24
     d76:	6b 01       	movw	r12, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	fc 01       	movw	r30, r24
     d7c:	17 82       	std	Z+7, r1	; 0x07
     d7e:	16 82       	std	Z+6, r1	; 0x06
     d80:	83 81       	ldd	r24, Z+3	; 0x03
     d82:	81 ff       	sbrs	r24, 1
     d84:	b9 c1       	rjmp	.+882    	; 0x10f8 <vfprintf+0x3b8>
     d86:	88 24       	eor	r8, r8
     d88:	83 94       	inc	r8
     d8a:	91 2c       	mov	r9, r1
     d8c:	8c 0e       	add	r8, r28
     d8e:	9d 1e       	adc	r9, r29
     d90:	f7 01       	movw	r30, r14
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	f6 01       	movw	r30, r12
     d96:	93 fd       	sbrc	r25, 3
     d98:	85 91       	lpm	r24, Z+
     d9a:	93 ff       	sbrs	r25, 3
     d9c:	81 91       	ld	r24, Z+
     d9e:	6f 01       	movw	r12, r30
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <vfprintf+0x66>
     da4:	a5 c1       	rjmp	.+842    	; 0x10f0 <vfprintf+0x3b0>
     da6:	85 32       	cpi	r24, 0x25	; 37
     da8:	39 f4       	brne	.+14     	; 0xdb8 <vfprintf+0x78>
     daa:	93 fd       	sbrc	r25, 3
     dac:	85 91       	lpm	r24, Z+
     dae:	93 ff       	sbrs	r25, 3
     db0:	81 91       	ld	r24, Z+
     db2:	6f 01       	movw	r12, r30
     db4:	85 32       	cpi	r24, 0x25	; 37
     db6:	21 f4       	brne	.+8      	; 0xdc0 <vfprintf+0x80>
     db8:	b7 01       	movw	r22, r14
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	cf d1       	rcall	.+926    	; 0x115c <fputc>
     dbe:	e8 cf       	rjmp	.-48     	; 0xd90 <vfprintf+0x50>
     dc0:	51 2c       	mov	r5, r1
     dc2:	31 2c       	mov	r3, r1
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	20 32       	cpi	r18, 0x20	; 32
     dc8:	a8 f4       	brcc	.+42     	; 0xdf4 <vfprintf+0xb4>
     dca:	8b 32       	cpi	r24, 0x2B	; 43
     dcc:	61 f0       	breq	.+24     	; 0xde6 <vfprintf+0xa6>
     dce:	28 f4       	brcc	.+10     	; 0xdda <vfprintf+0x9a>
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	51 f0       	breq	.+20     	; 0xde8 <vfprintf+0xa8>
     dd4:	83 32       	cpi	r24, 0x23	; 35
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <vfprintf+0xb4>
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <vfprintf+0xb0>
     dda:	8d 32       	cpi	r24, 0x2D	; 45
     ddc:	39 f0       	breq	.+14     	; 0xdec <vfprintf+0xac>
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	49 f4       	brne	.+18     	; 0xdf4 <vfprintf+0xb4>
     de2:	21 60       	ori	r18, 0x01	; 1
     de4:	28 c0       	rjmp	.+80     	; 0xe36 <vfprintf+0xf6>
     de6:	22 60       	ori	r18, 0x02	; 2
     de8:	24 60       	ori	r18, 0x04	; 4
     dea:	25 c0       	rjmp	.+74     	; 0xe36 <vfprintf+0xf6>
     dec:	28 60       	ori	r18, 0x08	; 8
     dee:	23 c0       	rjmp	.+70     	; 0xe36 <vfprintf+0xf6>
     df0:	20 61       	ori	r18, 0x10	; 16
     df2:	21 c0       	rjmp	.+66     	; 0xe36 <vfprintf+0xf6>
     df4:	27 fd       	sbrc	r18, 7
     df6:	27 c0       	rjmp	.+78     	; 0xe46 <vfprintf+0x106>
     df8:	38 2f       	mov	r19, r24
     dfa:	30 53       	subi	r19, 0x30	; 48
     dfc:	3a 30       	cpi	r19, 0x0A	; 10
     dfe:	78 f4       	brcc	.+30     	; 0xe1e <vfprintf+0xde>
     e00:	26 ff       	sbrs	r18, 6
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <vfprintf+0xd0>
     e04:	fa e0       	ldi	r31, 0x0A	; 10
     e06:	5f 9e       	mul	r5, r31
     e08:	30 0d       	add	r19, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	53 2e       	mov	r5, r19
     e0e:	13 c0       	rjmp	.+38     	; 0xe36 <vfprintf+0xf6>
     e10:	8a e0       	ldi	r24, 0x0A	; 10
     e12:	38 9e       	mul	r3, r24
     e14:	30 0d       	add	r19, r0
     e16:	11 24       	eor	r1, r1
     e18:	33 2e       	mov	r3, r19
     e1a:	20 62       	ori	r18, 0x20	; 32
     e1c:	0c c0       	rjmp	.+24     	; 0xe36 <vfprintf+0xf6>
     e1e:	8e 32       	cpi	r24, 0x2E	; 46
     e20:	21 f4       	brne	.+8      	; 0xe2a <vfprintf+0xea>
     e22:	26 fd       	sbrc	r18, 6
     e24:	65 c1       	rjmp	.+714    	; 0x10f0 <vfprintf+0x3b0>
     e26:	20 64       	ori	r18, 0x40	; 64
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0xf6>
     e2a:	8c 36       	cpi	r24, 0x6C	; 108
     e2c:	11 f4       	brne	.+4      	; 0xe32 <vfprintf+0xf2>
     e2e:	20 68       	ori	r18, 0x80	; 128
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <vfprintf+0xf6>
     e32:	88 36       	cpi	r24, 0x68	; 104
     e34:	41 f4       	brne	.+16     	; 0xe46 <vfprintf+0x106>
     e36:	f6 01       	movw	r30, r12
     e38:	93 fd       	sbrc	r25, 3
     e3a:	85 91       	lpm	r24, Z+
     e3c:	93 ff       	sbrs	r25, 3
     e3e:	81 91       	ld	r24, Z+
     e40:	6f 01       	movw	r12, r30
     e42:	81 11       	cpse	r24, r1
     e44:	c0 cf       	rjmp	.-128    	; 0xdc6 <vfprintf+0x86>
     e46:	98 2f       	mov	r25, r24
     e48:	95 54       	subi	r25, 0x45	; 69
     e4a:	93 30       	cpi	r25, 0x03	; 3
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <vfprintf+0x114>
     e4e:	90 52       	subi	r25, 0x20	; 32
     e50:	93 30       	cpi	r25, 0x03	; 3
     e52:	28 f4       	brcc	.+10     	; 0xe5e <vfprintf+0x11e>
     e54:	0c 5f       	subi	r16, 0xFC	; 252
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	ff e3       	ldi	r31, 0x3F	; 63
     e5a:	f9 83       	std	Y+1, r31	; 0x01
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x138>
     e5e:	83 36       	cpi	r24, 0x63	; 99
     e60:	31 f0       	breq	.+12     	; 0xe6e <vfprintf+0x12e>
     e62:	83 37       	cpi	r24, 0x73	; 115
     e64:	71 f0       	breq	.+28     	; 0xe82 <vfprintf+0x142>
     e66:	83 35       	cpi	r24, 0x53	; 83
     e68:	09 f0       	breq	.+2      	; 0xe6c <vfprintf+0x12c>
     e6a:	5a c0       	rjmp	.+180    	; 0xf20 <vfprintf+0x1e0>
     e6c:	22 c0       	rjmp	.+68     	; 0xeb2 <vfprintf+0x172>
     e6e:	f8 01       	movw	r30, r16
     e70:	80 81       	ld	r24, Z
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	0e 5f       	subi	r16, 0xFE	; 254
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	44 24       	eor	r4, r4
     e7a:	43 94       	inc	r4
     e7c:	51 2c       	mov	r5, r1
     e7e:	54 01       	movw	r10, r8
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <vfprintf+0x16a>
     e82:	38 01       	movw	r6, r16
     e84:	f2 e0       	ldi	r31, 0x02	; 2
     e86:	6f 0e       	add	r6, r31
     e88:	71 1c       	adc	r7, r1
     e8a:	f8 01       	movw	r30, r16
     e8c:	a0 80       	ld	r10, Z
     e8e:	b1 80       	ldd	r11, Z+1	; 0x01
     e90:	26 ff       	sbrs	r18, 6
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <vfprintf+0x15a>
     e94:	65 2d       	mov	r22, r5
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x15e>
     e9a:	6f ef       	ldi	r22, 0xFF	; 255
     e9c:	7f ef       	ldi	r23, 0xFF	; 255
     e9e:	c5 01       	movw	r24, r10
     ea0:	2c 87       	std	Y+12, r18	; 0x0c
     ea2:	51 d1       	rcall	.+674    	; 0x1146 <strnlen>
     ea4:	2c 01       	movw	r4, r24
     ea6:	83 01       	movw	r16, r6
     ea8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eaa:	6f e7       	ldi	r22, 0x7F	; 127
     eac:	26 2e       	mov	r2, r22
     eae:	22 22       	and	r2, r18
     eb0:	17 c0       	rjmp	.+46     	; 0xee0 <vfprintf+0x1a0>
     eb2:	38 01       	movw	r6, r16
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	6f 0e       	add	r6, r31
     eb8:	71 1c       	adc	r7, r1
     eba:	f8 01       	movw	r30, r16
     ebc:	a0 80       	ld	r10, Z
     ebe:	b1 80       	ldd	r11, Z+1	; 0x01
     ec0:	26 ff       	sbrs	r18, 6
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <vfprintf+0x18a>
     ec4:	65 2d       	mov	r22, r5
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <vfprintf+0x18e>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	c5 01       	movw	r24, r10
     ed0:	2c 87       	std	Y+12, r18	; 0x0c
     ed2:	2e d1       	rcall	.+604    	; 0x1130 <strnlen_P>
     ed4:	2c 01       	movw	r4, r24
     ed6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ed8:	50 e8       	ldi	r21, 0x80	; 128
     eda:	25 2e       	mov	r2, r21
     edc:	22 2a       	or	r2, r18
     ede:	83 01       	movw	r16, r6
     ee0:	23 fc       	sbrc	r2, 3
     ee2:	1a c0       	rjmp	.+52     	; 0xf18 <vfprintf+0x1d8>
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <vfprintf+0x1b0>
     ee6:	b7 01       	movw	r22, r14
     ee8:	80 e2       	ldi	r24, 0x20	; 32
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	37 d1       	rcall	.+622    	; 0x115c <fputc>
     eee:	3a 94       	dec	r3
     ef0:	83 2d       	mov	r24, r3
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	48 16       	cp	r4, r24
     ef6:	59 06       	cpc	r5, r25
     ef8:	b0 f3       	brcs	.-20     	; 0xee6 <vfprintf+0x1a6>
     efa:	0e c0       	rjmp	.+28     	; 0xf18 <vfprintf+0x1d8>
     efc:	f5 01       	movw	r30, r10
     efe:	27 fc       	sbrc	r2, 7
     f00:	85 91       	lpm	r24, Z+
     f02:	27 fe       	sbrs	r2, 7
     f04:	81 91       	ld	r24, Z+
     f06:	5f 01       	movw	r10, r30
     f08:	b7 01       	movw	r22, r14
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	27 d1       	rcall	.+590    	; 0x115c <fputc>
     f0e:	31 10       	cpse	r3, r1
     f10:	3a 94       	dec	r3
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	4f 1a       	sub	r4, r31
     f16:	51 08       	sbc	r5, r1
     f18:	41 14       	cp	r4, r1
     f1a:	51 04       	cpc	r5, r1
     f1c:	79 f7       	brne	.-34     	; 0xefc <vfprintf+0x1bc>
     f1e:	e5 c0       	rjmp	.+458    	; 0x10ea <vfprintf+0x3aa>
     f20:	84 36       	cpi	r24, 0x64	; 100
     f22:	11 f0       	breq	.+4      	; 0xf28 <vfprintf+0x1e8>
     f24:	89 36       	cpi	r24, 0x69	; 105
     f26:	39 f5       	brne	.+78     	; 0xf76 <vfprintf+0x236>
     f28:	f8 01       	movw	r30, r16
     f2a:	27 ff       	sbrs	r18, 7
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <vfprintf+0x1fc>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	0c 5f       	subi	r16, 0xFC	; 252
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c <vfprintf+0x20c>
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	88 27       	eor	r24, r24
     f42:	77 fd       	sbrc	r23, 7
     f44:	80 95       	com	r24
     f46:	98 2f       	mov	r25, r24
     f48:	0e 5f       	subi	r16, 0xFE	; 254
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	4f e6       	ldi	r20, 0x6F	; 111
     f4e:	b4 2e       	mov	r11, r20
     f50:	b2 22       	and	r11, r18
     f52:	97 ff       	sbrs	r25, 7
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x228>
     f56:	90 95       	com	r25
     f58:	80 95       	com	r24
     f5a:	70 95       	com	r23
     f5c:	61 95       	neg	r22
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8f 4f       	sbci	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	f0 e8       	ldi	r31, 0x80	; 128
     f66:	bf 2a       	or	r11, r31
     f68:	2a e0       	ldi	r18, 0x0A	; 10
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	a4 01       	movw	r20, r8
     f6e:	22 d1       	rcall	.+580    	; 0x11b4 <__ultoa_invert>
     f70:	a8 2e       	mov	r10, r24
     f72:	a8 18       	sub	r10, r8
     f74:	42 c0       	rjmp	.+132    	; 0xffa <vfprintf+0x2ba>
     f76:	85 37       	cpi	r24, 0x75	; 117
     f78:	31 f4       	brne	.+12     	; 0xf86 <vfprintf+0x246>
     f7a:	3f ee       	ldi	r19, 0xEF	; 239
     f7c:	b3 2e       	mov	r11, r19
     f7e:	b2 22       	and	r11, r18
     f80:	2a e0       	ldi	r18, 0x0A	; 10
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	24 c0       	rjmp	.+72     	; 0xfce <vfprintf+0x28e>
     f86:	99 ef       	ldi	r25, 0xF9	; 249
     f88:	b9 2e       	mov	r11, r25
     f8a:	b2 22       	and	r11, r18
     f8c:	8f 36       	cpi	r24, 0x6F	; 111
     f8e:	b9 f0       	breq	.+46     	; 0xfbe <vfprintf+0x27e>
     f90:	20 f4       	brcc	.+8      	; 0xf9a <vfprintf+0x25a>
     f92:	88 35       	cpi	r24, 0x58	; 88
     f94:	09 f0       	breq	.+2      	; 0xf98 <vfprintf+0x258>
     f96:	ac c0       	rjmp	.+344    	; 0x10f0 <vfprintf+0x3b0>
     f98:	0d c0       	rjmp	.+26     	; 0xfb4 <vfprintf+0x274>
     f9a:	80 37       	cpi	r24, 0x70	; 112
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <vfprintf+0x266>
     f9e:	88 37       	cpi	r24, 0x78	; 120
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <vfprintf+0x264>
     fa2:	a6 c0       	rjmp	.+332    	; 0x10f0 <vfprintf+0x3b0>
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x26a>
     fa6:	20 e1       	ldi	r18, 0x10	; 16
     fa8:	b2 2a       	or	r11, r18
     faa:	b4 fe       	sbrs	r11, 4
     fac:	0b c0       	rjmp	.+22     	; 0xfc4 <vfprintf+0x284>
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	b8 2a       	or	r11, r24
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <vfprintf+0x284>
     fb4:	24 ff       	sbrs	r18, 4
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <vfprintf+0x28a>
     fb8:	e6 e0       	ldi	r30, 0x06	; 6
     fba:	be 2a       	or	r11, r30
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <vfprintf+0x28a>
     fbe:	28 e0       	ldi	r18, 0x08	; 8
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <vfprintf+0x28e>
     fc4:	20 e1       	ldi	r18, 0x10	; 16
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <vfprintf+0x28e>
     fca:	20 e1       	ldi	r18, 0x10	; 16
     fcc:	32 e0       	ldi	r19, 0x02	; 2
     fce:	f8 01       	movw	r30, r16
     fd0:	b7 fe       	sbrs	r11, 7
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <vfprintf+0x2a2>
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	0c 5f       	subi	r16, 0xFC	; 252
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x2ae>
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 5f       	subi	r16, 0xFE	; 254
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	a4 01       	movw	r20, r8
     ff0:	e1 d0       	rcall	.+450    	; 0x11b4 <__ultoa_invert>
     ff2:	a8 2e       	mov	r10, r24
     ff4:	a8 18       	sub	r10, r8
     ff6:	ff e7       	ldi	r31, 0x7F	; 127
     ff8:	bf 22       	and	r11, r31
     ffa:	b6 fe       	sbrs	r11, 6
     ffc:	0b c0       	rjmp	.+22     	; 0x1014 <vfprintf+0x2d4>
     ffe:	2b 2d       	mov	r18, r11
    1000:	2e 7f       	andi	r18, 0xFE	; 254
    1002:	a5 14       	cp	r10, r5
    1004:	50 f4       	brcc	.+20     	; 0x101a <vfprintf+0x2da>
    1006:	b4 fe       	sbrs	r11, 4
    1008:	0a c0       	rjmp	.+20     	; 0x101e <vfprintf+0x2de>
    100a:	b2 fc       	sbrc	r11, 2
    100c:	08 c0       	rjmp	.+16     	; 0x101e <vfprintf+0x2de>
    100e:	2b 2d       	mov	r18, r11
    1010:	2e 7e       	andi	r18, 0xEE	; 238
    1012:	05 c0       	rjmp	.+10     	; 0x101e <vfprintf+0x2de>
    1014:	7a 2c       	mov	r7, r10
    1016:	2b 2d       	mov	r18, r11
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <vfprintf+0x2e0>
    101a:	7a 2c       	mov	r7, r10
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <vfprintf+0x2e0>
    101e:	75 2c       	mov	r7, r5
    1020:	24 ff       	sbrs	r18, 4
    1022:	0d c0       	rjmp	.+26     	; 0x103e <vfprintf+0x2fe>
    1024:	fe 01       	movw	r30, r28
    1026:	ea 0d       	add	r30, r10
    1028:	f1 1d       	adc	r31, r1
    102a:	80 81       	ld	r24, Z
    102c:	80 33       	cpi	r24, 0x30	; 48
    102e:	11 f4       	brne	.+4      	; 0x1034 <vfprintf+0x2f4>
    1030:	29 7e       	andi	r18, 0xE9	; 233
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <vfprintf+0x306>
    1034:	22 ff       	sbrs	r18, 2
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0x304>
    1038:	73 94       	inc	r7
    103a:	73 94       	inc	r7
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <vfprintf+0x306>
    103e:	82 2f       	mov	r24, r18
    1040:	86 78       	andi	r24, 0x86	; 134
    1042:	09 f0       	breq	.+2      	; 0x1046 <vfprintf+0x306>
    1044:	73 94       	inc	r7
    1046:	23 fd       	sbrc	r18, 3
    1048:	13 c0       	rjmp	.+38     	; 0x1070 <vfprintf+0x330>
    104a:	20 ff       	sbrs	r18, 0
    104c:	0e c0       	rjmp	.+28     	; 0x106a <vfprintf+0x32a>
    104e:	5a 2c       	mov	r5, r10
    1050:	73 14       	cp	r7, r3
    1052:	58 f4       	brcc	.+22     	; 0x106a <vfprintf+0x32a>
    1054:	53 0c       	add	r5, r3
    1056:	57 18       	sub	r5, r7
    1058:	73 2c       	mov	r7, r3
    105a:	07 c0       	rjmp	.+14     	; 0x106a <vfprintf+0x32a>
    105c:	b7 01       	movw	r22, r14
    105e:	80 e2       	ldi	r24, 0x20	; 32
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	2c 87       	std	Y+12, r18	; 0x0c
    1064:	7b d0       	rcall	.+246    	; 0x115c <fputc>
    1066:	73 94       	inc	r7
    1068:	2c 85       	ldd	r18, Y+12	; 0x0c
    106a:	73 14       	cp	r7, r3
    106c:	b8 f3       	brcs	.-18     	; 0x105c <vfprintf+0x31c>
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <vfprintf+0x338>
    1070:	73 14       	cp	r7, r3
    1072:	10 f4       	brcc	.+4      	; 0x1078 <vfprintf+0x338>
    1074:	37 18       	sub	r3, r7
    1076:	01 c0       	rjmp	.+2      	; 0x107a <vfprintf+0x33a>
    1078:	31 2c       	mov	r3, r1
    107a:	24 ff       	sbrs	r18, 4
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <vfprintf+0x360>
    107e:	b7 01       	movw	r22, r14
    1080:	80 e3       	ldi	r24, 0x30	; 48
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	2c 87       	std	Y+12, r18	; 0x0c
    1086:	6a d0       	rcall	.+212    	; 0x115c <fputc>
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	22 ff       	sbrs	r18, 2
    108c:	1c c0       	rjmp	.+56     	; 0x10c6 <vfprintf+0x386>
    108e:	21 ff       	sbrs	r18, 1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <vfprintf+0x358>
    1092:	88 e5       	ldi	r24, 0x58	; 88
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x35c>
    1098:	88 e7       	ldi	r24, 0x78	; 120
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	b7 01       	movw	r22, r14
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <vfprintf+0x378>
    10a0:	82 2f       	mov	r24, r18
    10a2:	86 78       	andi	r24, 0x86	; 134
    10a4:	81 f0       	breq	.+32     	; 0x10c6 <vfprintf+0x386>
    10a6:	21 fd       	sbrc	r18, 1
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <vfprintf+0x36e>
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <vfprintf+0x370>
    10ae:	8b e2       	ldi	r24, 0x2B	; 43
    10b0:	27 fd       	sbrc	r18, 7
    10b2:	8d e2       	ldi	r24, 0x2D	; 45
    10b4:	b7 01       	movw	r22, r14
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	51 d0       	rcall	.+162    	; 0x115c <fputc>
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <vfprintf+0x386>
    10bc:	b7 01       	movw	r22, r14
    10be:	80 e3       	ldi	r24, 0x30	; 48
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	4c d0       	rcall	.+152    	; 0x115c <fputc>
    10c4:	5a 94       	dec	r5
    10c6:	a5 14       	cp	r10, r5
    10c8:	c8 f3       	brcs	.-14     	; 0x10bc <vfprintf+0x37c>
    10ca:	aa 94       	dec	r10
    10cc:	f4 01       	movw	r30, r8
    10ce:	ea 0d       	add	r30, r10
    10d0:	f1 1d       	adc	r31, r1
    10d2:	b7 01       	movw	r22, r14
    10d4:	80 81       	ld	r24, Z
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	41 d0       	rcall	.+130    	; 0x115c <fputc>
    10da:	a1 10       	cpse	r10, r1
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <vfprintf+0x38a>
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <vfprintf+0x3aa>
    10e0:	b7 01       	movw	r22, r14
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	3a d0       	rcall	.+116    	; 0x115c <fputc>
    10e8:	3a 94       	dec	r3
    10ea:	31 10       	cpse	r3, r1
    10ec:	f9 cf       	rjmp	.-14     	; 0x10e0 <vfprintf+0x3a0>
    10ee:	50 ce       	rjmp	.-864    	; 0xd90 <vfprintf+0x50>
    10f0:	f7 01       	movw	r30, r14
    10f2:	26 81       	ldd	r18, Z+6	; 0x06
    10f4:	37 81       	ldd	r19, Z+7	; 0x07
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x3bc>
    10f8:	2f ef       	ldi	r18, 0xFF	; 255
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	c9 01       	movw	r24, r18
    10fe:	2c 96       	adiw	r28, 0x0c	; 12
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	7f 90       	pop	r7
    1124:	6f 90       	pop	r6
    1126:	5f 90       	pop	r5
    1128:	4f 90       	pop	r4
    112a:	3f 90       	pop	r3
    112c:	2f 90       	pop	r2
    112e:	08 95       	ret

00001130 <strnlen_P>:
    1130:	fc 01       	movw	r30, r24
    1132:	05 90       	lpm	r0, Z+
    1134:	61 50       	subi	r22, 0x01	; 1
    1136:	70 40       	sbci	r23, 0x00	; 0
    1138:	01 10       	cpse	r0, r1
    113a:	d8 f7       	brcc	.-10     	; 0x1132 <strnlen_P+0x2>
    113c:	80 95       	com	r24
    113e:	90 95       	com	r25
    1140:	8e 0f       	add	r24, r30
    1142:	9f 1f       	adc	r25, r31
    1144:	08 95       	ret

00001146 <strnlen>:
    1146:	fc 01       	movw	r30, r24
    1148:	61 50       	subi	r22, 0x01	; 1
    114a:	70 40       	sbci	r23, 0x00	; 0
    114c:	01 90       	ld	r0, Z+
    114e:	01 10       	cpse	r0, r1
    1150:	d8 f7       	brcc	.-10     	; 0x1148 <strnlen+0x2>
    1152:	80 95       	com	r24
    1154:	90 95       	com	r25
    1156:	8e 0f       	add	r24, r30
    1158:	9f 1f       	adc	r25, r31
    115a:	08 95       	ret

0000115c <fputc>:
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	8c 01       	movw	r16, r24
    1166:	eb 01       	movw	r28, r22
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	81 fd       	sbrc	r24, 1
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <fputc+0x18>
    116e:	0f ef       	ldi	r16, 0xFF	; 255
    1170:	1f ef       	ldi	r17, 0xFF	; 255
    1172:	1a c0       	rjmp	.+52     	; 0x11a8 <fputc+0x4c>
    1174:	82 ff       	sbrs	r24, 2
    1176:	0d c0       	rjmp	.+26     	; 0x1192 <fputc+0x36>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	64 f4       	brge	.+24     	; 0x119e <fputc+0x42>
    1186:	e8 81       	ld	r30, Y
    1188:	f9 81       	ldd	r31, Y+1	; 0x01
    118a:	01 93       	st	Z+, r16
    118c:	f9 83       	std	Y+1, r31	; 0x01
    118e:	e8 83       	st	Y, r30
    1190:	06 c0       	rjmp	.+12     	; 0x119e <fputc+0x42>
    1192:	e8 85       	ldd	r30, Y+8	; 0x08
    1194:	f9 85       	ldd	r31, Y+9	; 0x09
    1196:	80 2f       	mov	r24, r16
    1198:	19 95       	eicall
    119a:	89 2b       	or	r24, r25
    119c:	41 f7       	brne	.-48     	; 0x116e <fputc+0x12>
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	9f 83       	std	Y+7, r25	; 0x07
    11a6:	8e 83       	std	Y+6, r24	; 0x06
    11a8:	c8 01       	movw	r24, r16
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <__ultoa_invert>:
    11b4:	fa 01       	movw	r30, r20
    11b6:	aa 27       	eor	r26, r26
    11b8:	28 30       	cpi	r18, 0x08	; 8
    11ba:	51 f1       	breq	.+84     	; 0x1210 <__ultoa_invert+0x5c>
    11bc:	20 31       	cpi	r18, 0x10	; 16
    11be:	81 f1       	breq	.+96     	; 0x1220 <__ultoa_invert+0x6c>
    11c0:	e8 94       	clt
    11c2:	6f 93       	push	r22
    11c4:	6e 7f       	andi	r22, 0xFE	; 254
    11c6:	6e 5f       	subi	r22, 0xFE	; 254
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	af 4f       	sbci	r26, 0xFF	; 255
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
    11d2:	3e d0       	rcall	.+124    	; 0x1250 <__ultoa_invert+0x9c>
    11d4:	b4 e0       	ldi	r27, 0x04	; 4
    11d6:	3c d0       	rcall	.+120    	; 0x1250 <__ultoa_invert+0x9c>
    11d8:	67 0f       	add	r22, r23
    11da:	78 1f       	adc	r23, r24
    11dc:	89 1f       	adc	r24, r25
    11de:	9a 1f       	adc	r25, r26
    11e0:	a1 1d       	adc	r26, r1
    11e2:	68 0f       	add	r22, r24
    11e4:	79 1f       	adc	r23, r25
    11e6:	8a 1f       	adc	r24, r26
    11e8:	91 1d       	adc	r25, r1
    11ea:	a1 1d       	adc	r26, r1
    11ec:	6a 0f       	add	r22, r26
    11ee:	71 1d       	adc	r23, r1
    11f0:	81 1d       	adc	r24, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	20 d0       	rcall	.+64     	; 0x1238 <__ultoa_invert+0x84>
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__ultoa_invert+0x48>
    11fa:	68 94       	set
    11fc:	3f 91       	pop	r19
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	26 9f       	mul	r18, r22
    1202:	11 24       	eor	r1, r1
    1204:	30 19       	sub	r19, r0
    1206:	30 5d       	subi	r19, 0xD0	; 208
    1208:	31 93       	st	Z+, r19
    120a:	de f6       	brtc	.-74     	; 0x11c2 <__ultoa_invert+0xe>
    120c:	cf 01       	movw	r24, r30
    120e:	08 95       	ret
    1210:	46 2f       	mov	r20, r22
    1212:	47 70       	andi	r20, 0x07	; 7
    1214:	40 5d       	subi	r20, 0xD0	; 208
    1216:	41 93       	st	Z+, r20
    1218:	b3 e0       	ldi	r27, 0x03	; 3
    121a:	0f d0       	rcall	.+30     	; 0x123a <__ultoa_invert+0x86>
    121c:	c9 f7       	brne	.-14     	; 0x1210 <__ultoa_invert+0x5c>
    121e:	f6 cf       	rjmp	.-20     	; 0x120c <__ultoa_invert+0x58>
    1220:	46 2f       	mov	r20, r22
    1222:	4f 70       	andi	r20, 0x0F	; 15
    1224:	40 5d       	subi	r20, 0xD0	; 208
    1226:	4a 33       	cpi	r20, 0x3A	; 58
    1228:	18 f0       	brcs	.+6      	; 0x1230 <__ultoa_invert+0x7c>
    122a:	49 5d       	subi	r20, 0xD9	; 217
    122c:	31 fd       	sbrc	r19, 1
    122e:	40 52       	subi	r20, 0x20	; 32
    1230:	41 93       	st	Z+, r20
    1232:	02 d0       	rcall	.+4      	; 0x1238 <__ultoa_invert+0x84>
    1234:	a9 f7       	brne	.-22     	; 0x1220 <__ultoa_invert+0x6c>
    1236:	ea cf       	rjmp	.-44     	; 0x120c <__ultoa_invert+0x58>
    1238:	b4 e0       	ldi	r27, 0x04	; 4
    123a:	a6 95       	lsr	r26
    123c:	97 95       	ror	r25
    123e:	87 95       	ror	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	ba 95       	dec	r27
    1246:	c9 f7       	brne	.-14     	; 0x123a <__ultoa_invert+0x86>
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 05       	cpc	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	08 95       	ret
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	0a 2e       	mov	r0, r26
    1256:	06 94       	lsr	r0
    1258:	57 95       	ror	r21
    125a:	47 95       	ror	r20
    125c:	37 95       	ror	r19
    125e:	27 95       	ror	r18
    1260:	ba 95       	dec	r27
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__ultoa_invert+0xa2>
    1264:	62 0f       	add	r22, r18
    1266:	73 1f       	adc	r23, r19
    1268:	84 1f       	adc	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	a0 1d       	adc	r26, r0
    126e:	08 95       	ret

00001270 <_exit>:
    1270:	f8 94       	cli

00001272 <__stop_program>:
    1272:	ff cf       	rjmp	.-2      	; 0x1272 <__stop_program>
