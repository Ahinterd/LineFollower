
LineFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000010f0  00001184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a5  00800270  00800270  000011f4  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  000020bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cd9  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ca3  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001710  00000000  00000000  00004c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000530  00000000  00000000  00006384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000854  00000000  00000000  000068b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001534  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  0000863c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__vector_5>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c9 c0       	rjmp	.+402    	; 0x1d0 <__vector_15>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ef       	ldi	r30, 0xF0	; 240
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 37       	cpi	r26, 0x70	; 112
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e7       	ldi	r26, 0x70	; 112
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 31       	cpi	r26, 0x15	; 21
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	c7 d0       	rcall	.+398    	; 0x2ae <main>
     120:	e5 c7       	rjmp	.+4042   	; 0x10ec <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initUSART>:
int IRSensorRight(){
	return 0;
}
int IRSensorMid(){
	return 0;
}
     124:	cf 92       	push	r12
     126:	ef 92       	push	r14
     128:	0f 93       	push	r16
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	ac d1       	rcall	.+856    	; 0x486 <USARTInitSTDIO>
     12e:	c1 2c       	mov	r12, r1
     130:	ee 24       	eor	r14, r14
     132:	e3 94       	inc	r14
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	40 e8       	ldi	r20, 0x80	; 128
     13a:	55 e2       	ldi	r21, 0x25	; 37
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	a9 d1       	rcall	.+850    	; 0x496 <USARTInit>
     144:	0f 91       	pop	r16
     146:	ef 90       	pop	r14
     148:	cf 90       	pop	r12
     14a:	08 95       	ret

0000014c <initNunchuck>:
     14c:	7c c4       	rjmp	.+2296   	; 0xa46 <wiinunchuck_init>
     14e:	08 95       	ret

00000150 <initUltrasonic>:
     150:	ea e6       	ldi	r30, 0x6A	; 106
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	81 60       	ori	r24, 0x01	; 1
     158:	80 83       	st	Z, r24
     15a:	ec 9a       	sbi	0x1d, 4	; 29
     15c:	08 9a       	sbi	0x01, 0	; 1
     15e:	6c 98       	cbi	0x0d, 4	; 13
     160:	10 92 71 02 	sts	0x0271, r1
     164:	10 92 70 02 	sts	0x0270, r1
     168:	08 95       	ret

0000016a <ultrasonic_init_timer2>:
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 b1 00 	sts	0x00B1, r24
     170:	80 93 70 00 	sts	0x0070, r24
     174:	10 92 b2 00 	sts	0x00B2, r1
     178:	10 92 83 02 	sts	0x0283, r1
     17c:	10 92 82 02 	sts	0x0282, r1
     180:	08 95       	ret

00000182 <ultrasonic_stop_timer2>:
     182:	10 92 b1 00 	sts	0x00B1, r1
     186:	08 95       	ret

00000188 <nunchuck_getData>:
     188:	a6 d3       	rcall	.+1868   	; 0x8d6 <wiinunchuck_update>
     18a:	5f d3       	rcall	.+1726   	; 0x84a <wiinunchuck_getbuttonC>
     18c:	80 93 84 02 	sts	0x0284, r24
     190:	59 d3       	rcall	.+1714   	; 0x844 <wiinunchuck_getbuttonZ>
     192:	80 93 8e 02 	sts	0x028E, r24
     196:	09 d3       	rcall	.+1554   	; 0x7aa <wiinunchuck_getjoyX>
     198:	90 93 89 02 	sts	0x0289, r25
     19c:	80 93 88 02 	sts	0x0288, r24
     1a0:	28 d3       	rcall	.+1616   	; 0x7f2 <wiinunchuck_getjoyY>
     1a2:	90 93 87 02 	sts	0x0287, r25
     1a6:	80 93 86 02 	sts	0x0286, r24
     1aa:	52 d3       	rcall	.+1700   	; 0x850 <wiinunchuck_getangleX>
     1ac:	90 93 8b 02 	sts	0x028B, r25
     1b0:	80 93 8a 02 	sts	0x028A, r24
     1b4:	56 d3       	rcall	.+1708   	; 0x862 <wiinunchuck_getangleY>
     1b6:	90 93 90 02 	sts	0x0290, r25
     1ba:	80 93 8f 02 	sts	0x028F, r24
     1be:	5a d3       	rcall	.+1716   	; 0x874 <wiinunchuck_getangleZ>
     1c0:	90 93 8d 02 	sts	0x028D, r25
     1c4:	80 93 8c 02 	sts	0x028C, r24
     1c8:	08 95       	ret

000001ca <ultrasonicCheckDist>:
     1ca:	85 e1       	ldi	r24, 0x15	; 21
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret

000001d0 <__vector_15>:
//Service Routine for Timer 2 (used for ultrasonic sensor)
ISR (TIMER2_OVF_vect)
{	
     1d0:	1f 92       	push	r1
     1d2:	0f 92       	push	r0
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	0f 92       	push	r0
     1d8:	11 24       	eor	r1, r1
     1da:	2f 93       	push	r18
     1dc:	8f 93       	push	r24
     1de:	9f 93       	push	r25
	ultrasonic_timerOVFValue++;
     1e0:	80 91 82 02 	lds	r24, 0x0282
     1e4:	90 91 83 02 	lds	r25, 0x0283
     1e8:	01 96       	adiw	r24, 0x01	; 1
     1ea:	90 93 83 02 	sts	0x0283, r25
     1ee:	80 93 82 02 	sts	0x0282, r24
	//check if Object out of range
	if(ultrasonic_timerOVFValue>1460){
     1f2:	85 3b       	cpi	r24, 0xB5	; 181
     1f4:	95 40       	sbci	r25, 0x05	; 5
     1f6:	18 f0       	brcs	.+6      	; 0x1fe <__vector_15+0x2e>
		ultrasonic_error = 1;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	80 93 85 02 	sts	0x0285, r24
	}
}
     1fe:	9f 91       	pop	r25
     200:	8f 91       	pop	r24
     202:	2f 91       	pop	r18
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <__vector_5>:
//Service Routine for Interrupt 4 which is used for ultrasonic sensor (echo)
ISR (INT4_vect)
{
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
     218:	0b b6       	in	r0, 0x3b	; 59
     21a:	0f 92       	push	r0
     21c:	2f 93       	push	r18
     21e:	3f 93       	push	r19
     220:	4f 93       	push	r20
     222:	5f 93       	push	r21
     224:	6f 93       	push	r22
     226:	7f 93       	push	r23
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
     22c:	af 93       	push	r26
     22e:	bf 93       	push	r27
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
	printf("interrupt4");
     234:	8e e0       	ldi	r24, 0x0E	; 14
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	9f 93       	push	r25
     23a:	8f 93       	push	r24
     23c:	7f d4       	rcall	.+2302   	; 0xb3c <printf>
	if(ultrasonic_working==1)			//check if signal was sent before echo was incoming
     23e:	80 91 70 02 	lds	r24, 0x0270
     242:	90 91 71 02 	lds	r25, 0x0271
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	e9 f4       	brne	.+58     	; 0x288 <__vector_5+0x7a>
	{
		if(ultrasonic_rising_edge==0)	//Check if echo is high
     24e:	80 91 74 02 	lds	r24, 0x0274
     252:	90 91 75 02 	lds	r25, 0x0275
     256:	89 2b       	or	r24, r25
     258:	41 f4       	brne	.+16     	; 0x26a <__vector_5+0x5c>
		{
			ultrasonic_init_timer2();	//start timer
     25a:	87 df       	rcall	.-242    	; 0x16a <ultrasonic_init_timer2>
			ultrasonic_rising_edge=1;	
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 75 02 	sts	0x0275, r25
     264:	80 93 74 02 	sts	0x0274, r24
     268:	0f c0       	rjmp	.+30     	; 0x288 <__vector_5+0x7a>
		}
		else //Check if echo turned low, calculate distance
		{
			ultrasonic_stop_timer2();	//stop timer
     26a:	8b df       	rcall	.-234    	; 0x182 <ultrasonic_stop_timer2>
			ultrasonic_rising_edge = 0;			//reset values
     26c:	10 92 75 02 	sts	0x0275, r1
     270:	10 92 74 02 	sts	0x0274, r1
			ultrasonic_working = 0;
     274:	10 92 71 02 	sts	0x0271, r1
     278:	10 92 70 02 	sts	0x0270, r1
			ultrasonic_gotSignal = 1;				//confirm success
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	90 93 73 02 	sts	0x0273, r25
     284:	80 93 72 02 	sts	0x0272, r24
		}
	}
}
     288:	ff 91       	pop	r31
     28a:	ef 91       	pop	r30
     28c:	bf 91       	pop	r27
     28e:	af 91       	pop	r26
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	7f 91       	pop	r23
     296:	6f 91       	pop	r22
     298:	5f 91       	pop	r21
     29a:	4f 91       	pop	r20
     29c:	3f 91       	pop	r19
     29e:	2f 91       	pop	r18
     2a0:	0f 90       	pop	r0
     2a2:	0b be       	out	0x3b, r0	; 59
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <main>:
int main(void)
{
	
	sei();
     2ae:	78 94       	sei
	initUSART();
     2b0:	39 df       	rcall	.-398    	; 0x124 <initUSART>
	printf("Starting\n");
     2b2:	89 e1       	ldi	r24, 0x19	; 25
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	53 d4       	rcall	.+2214   	; 0xb5e <puts>
	initNunchuck();
     2b8:	49 df       	rcall	.-366    	; 0x14c <initNunchuck>
	initUltrasonic();
     2ba:	4a df       	rcall	.-364    	; 0x150 <initUltrasonic>
	printf("Initialization complete!\n");
     2bc:	82 e2       	ldi	r24, 0x22	; 34
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	4e d4       	rcall	.+2204   	; 0xb5e <puts>
		if(automatic == 0)												//Check if Automatic Mode not enabled
		{
			nunchuck_getData();			
			if(buttonC)													//When C pressed toggle Automatic Mode
			{
				automatic = 1;
     2c2:	c1 e0       	ldi	r28, 0x01	; 1
	initUltrasonic();
	printf("Initialization complete!\n");
	
    while(1)
    {
		if(automatic == 0)												//Check if Automatic Mode not enabled
     2c4:	80 91 76 02 	lds	r24, 0x0276
     2c8:	81 11       	cpse	r24, r1
     2ca:	08 c0       	rjmp	.+16     	; 0x2dc <main+0x2e>
		{
			nunchuck_getData();			
     2cc:	5d df       	rcall	.-326    	; 0x188 <nunchuck_getData>
			if(buttonC)													//When C pressed toggle Automatic Mode
     2ce:	80 91 84 02 	lds	r24, 0x0284
     2d2:	88 23       	and	r24, r24
     2d4:	b9 f3       	breq	.-18     	; 0x2c4 <main+0x16>
			{
				automatic = 1;
     2d6:	c0 93 76 02 	sts	0x0276, r28
     2da:	f4 cf       	rjmp	.-24     	; 0x2c4 <main+0x16>
			}
			
		}else  															//In Automatic Mode
		{
			printf("Auto mode!\n\n");
     2dc:	8b e3       	ldi	r24, 0x3B	; 59
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	3e d4       	rcall	.+2172   	; 0xb5e <puts>
										
			if(ultrasonicCheckDist()<20)								//Check Distance to obstacle
     2e2:	73 df       	rcall	.-282    	; 0x1ca <ultrasonicCheckDist>
     2e4:	44 97       	sbiw	r24, 0x14	; 20
     2e6:	24 f4       	brge	.+8      	; 0x2f0 <main+0x42>
			{															//In Automatic Mode, obstacle in range
				printf("Obstacle in Range\n");			
     2e8:	87 e4       	ldi	r24, 0x47	; 71
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	38 d4       	rcall	.+2160   	; 0xb5e <puts>
     2ee:	ea cf       	rjmp	.-44     	; 0x2c4 <main+0x16>
			
			}else                       								//In Automatic Mode, no obstacle in range
			{	
				printf("NO OBSTACLE\n");														
     2f0:	89 e5       	ldi	r24, 0x59	; 89
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	34 d4       	rcall	.+2152   	; 0xb5e <puts>
     2f6:	e6 cf       	rjmp	.-52     	; 0x2c4 <main+0x16>

000002f8 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     2f8:	10 92 b9 00 	sts	0x00B9, r1
     2fc:	88 e9       	ldi	r24, 0x98	; 152
     2fe:	80 93 b8 00 	sts	0x00B8, r24
     302:	08 95       	ret

00000304 <i2c_start_wait>:
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec eb       	ldi	r30, 0xBC	; 188
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	24 ea       	ldi	r18, 0xA4	; 164
     30e:	a9 eb       	ldi	r26, 0xB9	; 185
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	cb eb       	ldi	r28, 0xBB	; 187
     314:	d0 e0       	ldi	r29, 0x00	; 0
     316:	34 e8       	ldi	r19, 0x84	; 132
     318:	44 e9       	ldi	r20, 0x94	; 148
     31a:	20 83       	st	Z, r18
     31c:	90 81       	ld	r25, Z
     31e:	99 23       	and	r25, r25
     320:	ec f7       	brge	.-6      	; 0x31c <i2c_start_wait+0x18>
     322:	9c 91       	ld	r25, X
     324:	98 7f       	andi	r25, 0xF8	; 248
     326:	98 30       	cpi	r25, 0x08	; 8
     328:	11 f0       	breq	.+4      	; 0x32e <i2c_start_wait+0x2a>
     32a:	90 31       	cpi	r25, 0x10	; 16
     32c:	b1 f7       	brne	.-20     	; 0x31a <i2c_start_wait+0x16>
     32e:	88 83       	st	Y, r24
     330:	30 83       	st	Z, r19
     332:	90 81       	ld	r25, Z
     334:	99 23       	and	r25, r25
     336:	ec f7       	brge	.-6      	; 0x332 <i2c_start_wait+0x2e>
     338:	9c 91       	ld	r25, X
     33a:	98 7f       	andi	r25, 0xF8	; 248
     33c:	90 32       	cpi	r25, 0x20	; 32
     33e:	11 f0       	breq	.+4      	; 0x344 <i2c_start_wait+0x40>
     340:	98 35       	cpi	r25, 0x58	; 88
     342:	29 f4       	brne	.+10     	; 0x34e <i2c_start_wait+0x4a>
     344:	40 83       	st	Z, r20
     346:	90 81       	ld	r25, Z
     348:	94 fd       	sbrc	r25, 4
     34a:	fd cf       	rjmp	.-6      	; 0x346 <i2c_start_wait+0x42>
     34c:	e6 cf       	rjmp	.-52     	; 0x31a <i2c_start_wait+0x16>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     354:	84 e9       	ldi	r24, 0x94	; 148
     356:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     35a:	ec eb       	ldi	r30, 0xBC	; 188
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	84 fd       	sbrc	r24, 4
     362:	fd cf       	rjmp	.-6      	; 0x35e <i2c_stop+0xa>

}/* i2c_stop */
     364:	08 95       	ret

00000366 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     366:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     36a:	84 e8       	ldi	r24, 0x84	; 132
     36c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     370:	ec eb       	ldi	r30, 0xBC	; 188
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	88 23       	and	r24, r24
     378:	ec f7       	brge	.-6      	; 0x374 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     37a:	90 91 b9 00 	lds	r25, 0x00B9
     37e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	98 32       	cpi	r25, 0x28	; 40
     384:	09 f4       	brne	.+2      	; 0x388 <i2c_write+0x22>
     386:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     388:	08 95       	ret

0000038a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     38a:	84 ec       	ldi	r24, 0xC4	; 196
     38c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     390:	ec eb       	ldi	r30, 0xBC	; 188
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	88 23       	and	r24, r24
     398:	ec f7       	brge	.-6      	; 0x394 <i2c_readAck+0xa>

    return TWDR;
     39a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     39e:	08 95       	ret

000003a0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3a0:	84 e8       	ldi	r24, 0x84	; 132
     3a2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     3a6:	ec eb       	ldi	r30, 0xBC	; 188
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	88 23       	and	r24, r24
     3ae:	ec f7       	brge	.-6      	; 0x3aa <i2c_readNak+0xa>
	
    return TWDR;
     3b0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     3b4:	08 95       	ret

000003b6 <USARTPutChar>:
Function for sending data via standard USART by printf
@param c character to be sent
@param *stream outputstream
@retval c (sended char), expected by printf
*******************************************************************************/
int16_t USARTPutChar(char c, FILE *stream) {
     3b6:	cf 93       	push	r28
     3b8:	c8 2f       	mov	r28, r24
#if defined (__AVR_ATmega2560__)        // stdio sends by USART0
  switch ( usart_stdio) {
     3ba:	80 91 77 02 	lds	r24, 0x0277
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	89 f0       	breq	.+34     	; 0x3e4 <USARTPutChar+0x2e>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	19 f0       	breq	.+6      	; 0x3cc <USARTPutChar+0x16>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	29 f5       	brne	.+74     	; 0x414 <USARTPutChar+0x5e>
     3ca:	18 c0       	rjmp	.+48     	; 0x3fc <USARTPutChar+0x46>
    case 3 :
      if (c == '\n') USARTPutChar('\r', stream);
     3cc:	ca 30       	cpi	r28, 0x0A	; 10
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <USARTPutChar+0x1e>
     3d0:	8d e0       	ldi	r24, 0x0D	; 13
     3d2:	f1 df       	rcall	.-30     	; 0x3b6 <USARTPutChar>
      loop_until_bit_is_set(UCSR3A, UDRE3);
     3d4:	e0 e3       	ldi	r30, 0x30	; 48
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	80 81       	ld	r24, Z
     3da:	85 ff       	sbrs	r24, 5
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <USARTPutChar+0x22>
      UDR3 = c;
     3de:	c0 93 36 01 	sts	0x0136, r28
      break;
     3e2:	23 c0       	rjmp	.+70     	; 0x42a <USARTPutChar+0x74>
    case 2 :
      if (c == '\n') USARTPutChar('\r', stream);
     3e4:	ca 30       	cpi	r28, 0x0A	; 10
     3e6:	11 f4       	brne	.+4      	; 0x3ec <USARTPutChar+0x36>
     3e8:	8d e0       	ldi	r24, 0x0D	; 13
     3ea:	e5 df       	rcall	.-54     	; 0x3b6 <USARTPutChar>
      loop_until_bit_is_set(UCSR2A, UDRE2);
     3ec:	e0 ed       	ldi	r30, 0xD0	; 208
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	85 ff       	sbrs	r24, 5
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <USARTPutChar+0x3a>
      UDR2 = c;
     3f6:	c0 93 d6 00 	sts	0x00D6, r28
      break;
     3fa:	17 c0       	rjmp	.+46     	; 0x42a <USARTPutChar+0x74>
    case 1 :
      if (c == '\n') USARTPutChar('\r', stream);
     3fc:	ca 30       	cpi	r28, 0x0A	; 10
     3fe:	11 f4       	brne	.+4      	; 0x404 <USARTPutChar+0x4e>
     400:	8d e0       	ldi	r24, 0x0D	; 13
     402:	d9 df       	rcall	.-78     	; 0x3b6 <USARTPutChar>
      loop_until_bit_is_set(UCSR1A, UDRE1);
     404:	e8 ec       	ldi	r30, 0xC8	; 200
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	85 ff       	sbrs	r24, 5
     40c:	fd cf       	rjmp	.-6      	; 0x408 <USARTPutChar+0x52>
      UDR1 = c;
     40e:	c0 93 ce 00 	sts	0x00CE, r28
      break;
     412:	0b c0       	rjmp	.+22     	; 0x42a <USARTPutChar+0x74>
    default:
      if (c == '\n') USARTPutChar('\r', stream);
     414:	ca 30       	cpi	r28, 0x0A	; 10
     416:	11 f4       	brne	.+4      	; 0x41c <USARTPutChar+0x66>
     418:	8d e0       	ldi	r24, 0x0D	; 13
     41a:	cd df       	rcall	.-102    	; 0x3b6 <USARTPutChar>
      loop_until_bit_is_set(UCSR0A, UDRE0);
     41c:	e0 ec       	ldi	r30, 0xC0	; 192
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	85 ff       	sbrs	r24, 5
     424:	fd cf       	rjmp	.-6      	; 0x420 <USARTPutChar+0x6a>
      UDR0 = c;
     426:	c0 93 c6 00 	sts	0x00C6, r28
  if (c == '\n') USARTPutChar('\r', stream);
  loop_until_bit_is_set(UCSRA, UDRE);
  UDR = c;
  return c;
#endif
} // USARTPutChar
     42a:	8c 2f       	mov	r24, r28
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <USARTGetChar>:
/***************************************************************************//**
Function for receiving data from standard USART by scanf with echo
@param *stream outputstream for echo
@retval received character
*******************************************************************************/
int16_t USARTGetChar(FILE *stream) {
     432:	bc 01       	movw	r22, r24
#if defined (__AVR_ATmega2560__)        // stdio sends by USART0
  switch ( usart_stdio) {
     434:	80 91 77 02 	lds	r24, 0x0277
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	69 f0       	breq	.+26     	; 0x456 <USARTGetChar+0x24>
     43c:	83 30       	cpi	r24, 0x03	; 3
     43e:	19 f0       	breq	.+6      	; 0x446 <USARTGetChar+0x14>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	c9 f4       	brne	.+50     	; 0x476 <USARTGetChar+0x44>
     444:	10 c0       	rjmp	.+32     	; 0x466 <USARTGetChar+0x34>
    case 3 :
      while (!(UCSR3A & (1<<RXC3)));
     446:	e0 e3       	ldi	r30, 0x30	; 48
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	88 23       	and	r24, r24
     44e:	ec f7       	brge	.-6      	; 0x44a <USARTGetChar+0x18>
      return (int16_t)(USARTPutChar(UDR3, stream)); // echo;
     450:	80 91 36 01 	lds	r24, 0x0136
     454:	b0 cf       	rjmp	.-160    	; 0x3b6 <USARTPutChar>
    break;
    case 2 :
      while (!(UCSR2A & (1<<RXC2)));
     456:	e0 ed       	ldi	r30, 0xD0	; 208
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	88 23       	and	r24, r24
     45e:	ec f7       	brge	.-6      	; 0x45a <USARTGetChar+0x28>
      return (int16_t)(USARTPutChar(UDR2, stream)); // echo;
     460:	80 91 d6 00 	lds	r24, 0x00D6
     464:	a8 cf       	rjmp	.-176    	; 0x3b6 <USARTPutChar>
    break;
    case 1 :
      while (!(UCSR1A & (1<<RXC1)));
     466:	e8 ec       	ldi	r30, 0xC8	; 200
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	88 23       	and	r24, r24
     46e:	ec f7       	brge	.-6      	; 0x46a <USARTGetChar+0x38>
      return (int16_t)(USARTPutChar(UDR1, stream)); // echo;
     470:	80 91 ce 00 	lds	r24, 0x00CE
     474:	a0 cf       	rjmp	.-192    	; 0x3b6 <USARTPutChar>
    break;
    default:
      while (!(UCSR0A & (1<<RXC0)));
     476:	e0 ec       	ldi	r30, 0xC0	; 192
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	88 23       	and	r24, r24
     47e:	ec f7       	brge	.-6      	; 0x47a <USARTGetChar+0x48>
      return (int16_t)(USARTPutChar(UDR0, stream)); // echo;
     480:	80 91 c6 00 	lds	r24, 0x00C6
      break;
  }
#endif
} // USARTGetChar
     484:	98 cf       	rjmp	.-208    	; 0x3b6 <USARTPutChar>

00000486 <USARTInitSTDIO>:
@param uart select one of the controllers USART (0 .. n see datasheet)
@retval - none
*******************************************************************************/
void USARTInitSTDIO (uint8_t uart) {

  if ( uart < 4) {
     486:	84 30       	cpi	r24, 0x04	; 4
     488:	18 f4       	brcc	.+6      	; 0x490 <USARTInitSTDIO+0xa>
    usart_stdio = uart;
     48a:	80 93 77 02 	sts	0x0277, r24
     48e:	08 95       	ret
  } else {
    usart_stdio = 0;
     490:	10 92 77 02 	sts	0x0277, r1
     494:	08 95       	ret

00000496 <USARTInit>:
@param tx_int_enable enables the USARTx-TX-interrupt
@retval - none
*******************************************************************************/
void USARTInit (uint8_t uart, uint32_t baud,
                uint8_t rx_enable, uint8_t rx_int_enable,
                uint8_t tx_enable, uint8_t tx_int_enable ) {
     496:	2f 92       	push	r2
     498:	3f 92       	push	r3
     49a:	4f 92       	push	r4
     49c:	5f 92       	push	r5
     49e:	6f 92       	push	r6
     4a0:	7f 92       	push	r7
     4a2:	8f 92       	push	r8
     4a4:	9f 92       	push	r9
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	ef 92       	push	r14
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	2a 97       	sbiw	r28, 0x0a	; 10
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	92 2f       	mov	r25, r18
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;

  stdout = stdin = &mystdinout;
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	30 93 10 03 	sts	0x0310, r19
     4d0:	20 93 0f 03 	sts	0x030F, r18
     4d4:	30 93 12 03 	sts	0x0312, r19
     4d8:	20 93 11 03 	sts	0x0311, r18
        break;
     }
     break;

   case 16000000L :
     switch ( baud ) {
     4dc:	41 15       	cp	r20, r1
     4de:	2b e4       	ldi	r18, 0x4B	; 75
     4e0:	52 07       	cpc	r21, r18
     4e2:	61 05       	cpc	r22, r1
     4e4:	71 05       	cpc	r23, r1
     4e6:	71 f1       	breq	.+92     	; 0x544 <USARTInit+0xae>
     4e8:	90 f4       	brcc	.+36     	; 0x50e <USARTInit+0x78>
     4ea:	40 36       	cpi	r20, 0x60	; 96
     4ec:	29 e0       	ldi	r18, 0x09	; 9
     4ee:	52 07       	cpc	r21, r18
     4f0:	61 05       	cpc	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	79 f1       	breq	.+94     	; 0x554 <USARTInit+0xbe>
     4f6:	40 3c       	cpi	r20, 0xC0	; 192
     4f8:	22 e1       	ldi	r18, 0x12	; 18
     4fa:	52 07       	cpc	r21, r18
     4fc:	61 05       	cpc	r22, r1
     4fe:	71 05       	cpc	r23, r1
     500:	29 f1       	breq	.+74     	; 0x54c <USARTInit+0xb6>
     502:	40 3b       	cpi	r20, 0xB0	; 176
     504:	54 40       	sbci	r21, 0x04	; 4
     506:	61 05       	cpc	r22, r1
     508:	71 05       	cpc	r23, r1
     50a:	61 f5       	brne	.+88     	; 0x564 <USARTInit+0xce>
     50c:	27 c0       	rjmp	.+78     	; 0x55c <USARTInit+0xc6>
     50e:	41 15       	cp	r20, r1
     510:	21 ee       	ldi	r18, 0xE1	; 225
     512:	52 07       	cpc	r21, r18
     514:	61 05       	cpc	r22, r1
     516:	71 05       	cpc	r23, r1
     518:	49 f1       	breq	.+82     	; 0x56c <USARTInit+0xd6>
     51a:	41 15       	cp	r20, r1
     51c:	22 ec       	ldi	r18, 0xC2	; 194
     51e:	52 07       	cpc	r21, r18
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	62 07       	cpc	r22, r18
     524:	71 05       	cpc	r23, r1
     526:	31 f0       	breq	.+12     	; 0x534 <USARTInit+0x9e>
     528:	41 15       	cp	r20, r1
     52a:	56 49       	sbci	r21, 0x96	; 150
     52c:	61 05       	cpc	r22, r1
     52e:	71 05       	cpc	r23, r1
     530:	c9 f4       	brne	.+50     	; 0x564 <USARTInit+0xce>
     532:	04 c0       	rjmp	.+8      	; 0x53c <USARTInit+0xa6>
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	20 e1       	ldi	r18, 0x10	; 16
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	1b c0       	rjmp	.+54     	; 0x572 <USARTInit+0xdc>
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	23 e3       	ldi	r18, 0x33	; 51
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     540:	30 e0       	ldi	r19, 0x00	; 0
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
     542:	17 c0       	rjmp	.+46     	; 0x572 <USARTInit+0xdc>
#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;
     544:	40 e0       	ldi	r20, 0x00	; 0
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
      case 19200 : // 19200bps at 0.2% error see datasheet
        ubrrl = 51; break;
     546:	23 e3       	ldi	r18, 0x33	; 51
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     548:	30 e0       	ldi	r19, 0x00	; 0
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
      case 38400 : // 38400bps at 0.2% error see datasheet UBRR = 51
        doubleTransSpeed = 1; ubrrl = 51; break;
      case 19200 : // 19200bps at 0.2% error see datasheet
        ubrrl = 51; break;
     54a:	13 c0       	rjmp	.+38     	; 0x572 <USARTInit+0xdc>
      case 4800 : // 4800bps at -0.1% error see datasheet UBRR = 416
        doubleTransSpeed = 1; ubrrl = 160; ubrrh = 1; break;
     54c:	41 e0       	ldi	r20, 0x01	; 1
     54e:	20 ea       	ldi	r18, 0xA0	; 160
     550:	31 e0       	ldi	r19, 0x01	; 1
     552:	0f c0       	rjmp	.+30     	; 0x572 <USARTInit+0xdc>
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	20 e4       	ldi	r18, 0x40	; 64
     558:	33 e0       	ldi	r19, 0x03	; 3
     55a:	0b c0       	rjmp	.+22     	; 0x572 <USARTInit+0xdc>
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	22 e8       	ldi	r18, 0x82	; 130
     560:	36 e0       	ldi	r19, 0x06	; 6
     562:	07 c0       	rjmp	.+14     	; 0x572 <USARTInit+0xdc>
#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
  uint8_t ubrrl = 0;
  uint8_t doubleTransSpeed = 0;
     564:	40 e0       	ldi	r20, 0x00	; 0
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
      default: // 9600bps at 0.2% error see datasheet
        ubrrl = 103; break;
     566:	27 e6       	ldi	r18, 0x67	; 103
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     568:	30 e0       	ldi	r19, 0x00	; 0
      case 2400 : // 2400bps at 0.0% error see datasheet UBRR = 832
        doubleTransSpeed = 1; ubrrl = 64; ubrrh = 3; break;
      case 1200 : // 2400bps at 0.0% error see datasheet UBRR = 1666
        doubleTransSpeed = 1; ubrrl = 130;  ubrrh = 6; break;
      default: // 9600bps at 0.2% error see datasheet
        ubrrl = 103; break;
     56a:	03 c0       	rjmp	.+6      	; 0x572 <USARTInit+0xdc>
   case 16000000L :
     switch ( baud ) {
      case 115200 : // 115200bps at 2.1% error see datasheet
        doubleTransSpeed = 1; ubrrl = 16; break;
      case 57600 : // 57600bps at -0.8% error see datasheet UBRR = 34
        doubleTransSpeed = 1; ubrrl = 34; break;
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	22 e2       	ldi	r18, 0x22	; 34
                uint8_t tx_enable, uint8_t tx_int_enable ) {

#ifndef F_CPU
  #warning "F_CPU undefined --> used in module USART.C"
#endif
  uint8_t ubrrh = 0;
     570:	30 e0       	ldi	r19, 0x00	; 0
  /* set frame format: 8data, 1stop bit, no parity */
  UCSRC = (1<<URSEL) /*| (1<<USBS)*/ |(1<<UCSZ1) | (1<<UCSZ0);
#elif defined (__AVR_ATmega2560__)
  /* enable receiver and transmitter */
  /* set frame format: 8data, 1stop bit, no parity */
  switch ( uart ) {
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	09 f4       	brne	.+2      	; 0x578 <USARTInit+0xe2>
     576:	46 c0       	rjmp	.+140    	; 0x604 <USARTInit+0x16e>
     578:	38 f0       	brcs	.+14     	; 0x588 <USARTInit+0xf2>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	09 f4       	brne	.+2      	; 0x580 <USARTInit+0xea>
     57e:	81 c0       	rjmp	.+258    	; 0x682 <USARTInit+0x1ec>
     580:	83 30       	cpi	r24, 0x03	; 3
     582:	09 f0       	breq	.+2      	; 0x586 <USARTInit+0xf0>
     584:	fb c0       	rjmp	.+502    	; 0x77c <USARTInit+0x2e6>
     586:	ba c0       	rjmp	.+372    	; 0x6fc <USARTInit+0x266>
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
     588:	44 23       	and	r20, r20
     58a:	31 f0       	breq	.+12     	; 0x598 <USARTInit+0x102>
     58c:	e0 ec       	ldi	r30, 0xC0	; 192
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	82 60       	ori	r24, 0x02	; 2
     594:	80 83       	st	Z, r24
     596:	02 c0       	rjmp	.+4      	; 0x59c <USARTInit+0x106>
      else                    UCSR0A = 0x00;
     598:	10 92 c0 00 	sts	0x00C0, r1
      UBRR0H = ubrrh; UBRR0L = ubrrl;
     59c:	30 93 c5 00 	sts	0x00C5, r19
     5a0:	20 93 c4 00 	sts	0x00C4, r18
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     5a4:	80 e8       	ldi	r24, 0x80	; 128
     5a6:	08 9f       	mul	r16, r24
     5a8:	80 01       	movw	r16, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	90 fb       	bst	r25, 0
     5ae:	44 24       	eor	r4, r4
     5b0:	40 f8       	bld	r4, 0
     5b2:	51 2c       	mov	r5, r1
     5b4:	44 0c       	add	r4, r4
     5b6:	55 1c       	adc	r5, r5
     5b8:	44 0c       	add	r4, r4
     5ba:	55 1c       	adc	r5, r5
     5bc:	44 0c       	add	r4, r4
     5be:	55 1c       	adc	r5, r5
     5c0:	44 0c       	add	r4, r4
     5c2:	55 1c       	adc	r5, r5
     5c4:	40 2a       	or	r4, r16
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
     5c6:	e0 fa       	bst	r14, 0
     5c8:	66 24       	eor	r6, r6
     5ca:	60 f8       	bld	r6, 0
     5cc:	71 2c       	mov	r7, r1
     5ce:	66 0c       	add	r6, r6
     5d0:	77 1c       	adc	r7, r7
     5d2:	66 0c       	add	r6, r6
     5d4:	77 1c       	adc	r7, r7
     5d6:	66 0c       	add	r6, r6
     5d8:	77 1c       	adc	r7, r7
  switch ( uart ) {
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
      else                    UCSR0A = 0x00;
      UBRR0H = ubrrh; UBRR0L = ubrrl;
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     5da:	64 28       	or	r6, r4
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
     5dc:	c0 fa       	bst	r12, 0
     5de:	88 24       	eor	r8, r8
     5e0:	80 f8       	bld	r8, 0
     5e2:	91 2c       	mov	r9, r1
     5e4:	00 24       	eor	r0, r0
     5e6:	96 94       	lsr	r9
     5e8:	87 94       	ror	r8
     5ea:	07 94       	ror	r0
     5ec:	96 94       	lsr	r9
     5ee:	87 94       	ror	r8
     5f0:	07 94       	ror	r0
     5f2:	98 2c       	mov	r9, r8
     5f4:	80 2c       	mov	r8, r0
  switch ( uart ) {
    case 0 :
      if ( doubleTransSpeed ) UCSR0A |= (1<<U2X0); // double Transmission Speed
      else                    UCSR0A = 0x00;
      UBRR0H = ubrrh; UBRR0L = ubrrl;
      UCSR0B = ((rx_enable & 0x01)<<RXEN0) | ((rx_int_enable & 0x01)<<RXCIE0) |
     5f6:	86 28       	or	r8, r6
     5f8:	80 92 c1 00 	sts	0x00C1, r8
               ((tx_enable & 0x01)<<TXEN0) | ((tx_int_enable & 0x01)<<TXCIE0);
      UCSR0C=0x06;       // 8 Databit see datasheet
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	80 93 c2 00 	sts	0x00C2, r24
      break;
     602:	bc c0       	rjmp	.+376    	; 0x77c <USARTInit+0x2e6>
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
     604:	44 23       	and	r20, r20
     606:	31 f0       	breq	.+12     	; 0x614 <USARTInit+0x17e>
     608:	e8 ec       	ldi	r30, 0xC8	; 200
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	82 60       	ori	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
     612:	02 c0       	rjmp	.+4      	; 0x618 <USARTInit+0x182>
      else                    UCSR1A = 0x00;
     614:	10 92 c8 00 	sts	0x00C8, r1
      UBRR1H = ubrrh; UBRR1L = ubrrl;
     618:	30 93 cd 00 	sts	0x00CD, r19
     61c:	20 93 cc 00 	sts	0x00CC, r18
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     620:	e0 e8       	ldi	r30, 0x80	; 128
     622:	0e 9f       	mul	r16, r30
     624:	80 01       	movw	r16, r0
     626:	11 24       	eor	r1, r1
     628:	90 fb       	bst	r25, 0
     62a:	aa 24       	eor	r10, r10
     62c:	a0 f8       	bld	r10, 0
     62e:	b1 2c       	mov	r11, r1
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	aa 0c       	add	r10, r10
     636:	bb 1c       	adc	r11, r11
     638:	aa 0c       	add	r10, r10
     63a:	bb 1c       	adc	r11, r11
     63c:	aa 0c       	add	r10, r10
     63e:	bb 1c       	adc	r11, r11
     640:	a0 2a       	or	r10, r16
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
     642:	fe 2d       	mov	r31, r14
     644:	f1 70       	andi	r31, 0x01	; 1
     646:	f9 87       	std	Y+9, r31	; 0x09
     648:	1a 86       	std	Y+10, r1	; 0x0a
     64a:	89 85       	ldd	r24, Y+9	; 0x09
     64c:	9a 85       	ldd	r25, Y+10	; 0x0a
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
      break;
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
      else                    UCSR1A = 0x00;
      UBRR1H = ubrrh; UBRR1L = ubrrl;
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     65a:	8a 29       	or	r24, r10
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
     65c:	ac 2d       	mov	r26, r12
     65e:	a1 70       	andi	r26, 0x01	; 1
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	00 24       	eor	r0, r0
     664:	b6 95       	lsr	r27
     666:	a7 95       	ror	r26
     668:	07 94       	ror	r0
     66a:	b6 95       	lsr	r27
     66c:	a7 95       	ror	r26
     66e:	07 94       	ror	r0
     670:	ba 2f       	mov	r27, r26
     672:	a0 2d       	mov	r26, r0
      break;
    case 1 :
      if ( doubleTransSpeed ) UCSR1A |= (1<<U2X1); // double Transmission Speed
      else                    UCSR1A = 0x00;
      UBRR1H = ubrrh; UBRR1L = ubrrl;
      UCSR1B = ((rx_enable & 0x01)<<RXEN1) | ((rx_int_enable & 0x01)<<RXCIE1) |
     674:	a8 2b       	or	r26, r24
     676:	a0 93 c9 00 	sts	0x00C9, r26
               ((tx_enable & 0x01)<<TXEN1) | ((tx_int_enable & 0x01)<<TXCIE1);
      UCSR1C=0x06;       // 8 Databit see datasheet
     67a:	86 e0       	ldi	r24, 0x06	; 6
     67c:	80 93 ca 00 	sts	0x00CA, r24
      break;
     680:	7d c0       	rjmp	.+250    	; 0x77c <USARTInit+0x2e6>
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
     682:	44 23       	and	r20, r20
     684:	31 f0       	breq	.+12     	; 0x692 <USARTInit+0x1fc>
     686:	a0 ed       	ldi	r26, 0xD0	; 208
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	8c 91       	ld	r24, X
     68c:	82 60       	ori	r24, 0x02	; 2
     68e:	8c 93       	st	X, r24
     690:	02 c0       	rjmp	.+4      	; 0x696 <USARTInit+0x200>
      else                    UCSR2A = 0x00;
     692:	10 92 d0 00 	sts	0x00D0, r1
      UBRR2H = ubrrh; UBRR2L = ubrrl;
     696:	30 93 d5 00 	sts	0x00D5, r19
     69a:	20 93 d4 00 	sts	0x00D4, r18
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     69e:	20 e8       	ldi	r18, 0x80	; 128
     6a0:	02 9f       	mul	r16, r18
     6a2:	80 01       	movw	r16, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	e9 2f       	mov	r30, r25
     6a8:	e1 70       	andi	r30, 0x01	; 1
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	e2 95       	swap	r30
     6ae:	f2 95       	swap	r31
     6b0:	f0 7f       	andi	r31, 0xF0	; 240
     6b2:	fe 27       	eor	r31, r30
     6b4:	e0 7f       	andi	r30, 0xF0	; 240
     6b6:	fe 27       	eor	r31, r30
     6b8:	e0 2b       	or	r30, r16
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
     6ba:	e0 fa       	bst	r14, 0
     6bc:	22 24       	eor	r2, r2
     6be:	20 f8       	bld	r2, 0
     6c0:	31 2c       	mov	r3, r1
     6c2:	22 0c       	add	r2, r2
     6c4:	33 1c       	adc	r3, r3
     6c6:	22 0c       	add	r2, r2
     6c8:	33 1c       	adc	r3, r3
     6ca:	22 0c       	add	r2, r2
     6cc:	33 1c       	adc	r3, r3
      break;
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
      else                    UCSR2A = 0x00;
      UBRR2H = ubrrh; UBRR2L = ubrrl;
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     6ce:	2e 2a       	or	r2, r30
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
     6d0:	8c 2d       	mov	r24, r12
     6d2:	81 70       	andi	r24, 0x01	; 1
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	1a 82       	std	Y+2, r1	; 0x02
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	00 24       	eor	r0, r0
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	07 94       	ror	r0
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	07 94       	ror	r0
     6ea:	98 2f       	mov	r25, r24
     6ec:	80 2d       	mov	r24, r0
      break;
    case 2 :
      if ( doubleTransSpeed ) UCSR2A |= (1<<U2X2); // double Transmission Speed
      else                    UCSR2A = 0x00;
      UBRR2H = ubrrh; UBRR2L = ubrrl;
      UCSR2B = ((rx_enable & 0x01)<<RXEN2) | ((rx_int_enable & 0x01)<<RXCIE2) |
     6ee:	82 29       	or	r24, r2
     6f0:	80 93 d1 00 	sts	0x00D1, r24
               ((tx_enable & 0x01)<<TXEN2) | ((tx_int_enable & 0x01)<<TXCIE2);
      UCSR2C=0x06;       // 8 Databit see datasheet
     6f4:	86 e0       	ldi	r24, 0x06	; 6
     6f6:	80 93 d2 00 	sts	0x00D2, r24
      break;
     6fa:	40 c0       	rjmp	.+128    	; 0x77c <USARTInit+0x2e6>
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
     6fc:	44 23       	and	r20, r20
     6fe:	31 f0       	breq	.+12     	; 0x70c <USARTInit+0x276>
     700:	e0 e3       	ldi	r30, 0x30	; 48
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	80 81       	ld	r24, Z
     706:	82 60       	ori	r24, 0x02	; 2
     708:	80 83       	st	Z, r24
     70a:	02 c0       	rjmp	.+4      	; 0x710 <USARTInit+0x27a>
      else                    UCSR3A = 0x00;
     70c:	10 92 30 01 	sts	0x0130, r1
      UBRR3H = ubrrh; UBRR3L = ubrrl;
     710:	30 93 35 01 	sts	0x0135, r19
     714:	20 93 34 01 	sts	0x0134, r18
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     718:	e0 e8       	ldi	r30, 0x80	; 128
     71a:	0e 9f       	mul	r16, r30
     71c:	80 01       	movw	r16, r0
     71e:	11 24       	eor	r1, r1
     720:	91 70       	andi	r25, 0x01	; 1
     722:	9b 83       	std	Y+3, r25	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	82 95       	swap	r24
     72c:	92 95       	swap	r25
     72e:	90 7f       	andi	r25, 0xF0	; 240
     730:	98 27       	eor	r25, r24
     732:	80 7f       	andi	r24, 0xF0	; 240
     734:	98 27       	eor	r25, r24
     736:	80 2b       	or	r24, r16
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
     738:	fe 2d       	mov	r31, r14
     73a:	f1 70       	andi	r31, 0x01	; 1
     73c:	fd 83       	std	Y+5, r31	; 0x05
     73e:	1e 82       	std	Y+6, r1	; 0x06
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	3e 81       	ldd	r19, Y+6	; 0x06
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
      break;
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
      else                    UCSR3A = 0x00;
      UBRR3H = ubrrh; UBRR3L = ubrrl;
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     750:	28 2b       	or	r18, r24
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
     752:	8c 2d       	mov	r24, r12
     754:	81 70       	andi	r24, 0x01	; 1
     756:	8f 83       	std	Y+7, r24	; 0x07
     758:	18 86       	std	Y+8, r1	; 0x08
     75a:	8f 81       	ldd	r24, Y+7	; 0x07
     75c:	98 85       	ldd	r25, Y+8	; 0x08
     75e:	00 24       	eor	r0, r0
     760:	96 95       	lsr	r25
     762:	87 95       	ror	r24
     764:	07 94       	ror	r0
     766:	96 95       	lsr	r25
     768:	87 95       	ror	r24
     76a:	07 94       	ror	r0
     76c:	98 2f       	mov	r25, r24
     76e:	80 2d       	mov	r24, r0
      break;
    case 3 :
      if ( doubleTransSpeed ) UCSR3A |= (1<<U2X3); // double Transmission Speed
      else                    UCSR3A = 0x00;
      UBRR3H = ubrrh; UBRR3L = ubrrl;
      UCSR3B = ((rx_enable & 0x01)<<RXEN3) | ((rx_int_enable & 0x01)<<RXCIE3) |
     770:	82 2b       	or	r24, r18
     772:	80 93 31 01 	sts	0x0131, r24
               ((tx_enable & 0x01)<<TXEN3) | ((tx_int_enable & 0x01)<<TXCIE3);
      UCSR3C=0x06;       // 8 Databit see datasheet
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	80 93 32 01 	sts	0x0132, r24
    default: break;
  }
#else
  #warning "MCU unknown"
#endif
} // USART_init
     77c:	2a 96       	adiw	r28, 0x0a	; 10
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ef 90       	pop	r14
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	6f 90       	pop	r6
     7a0:	5f 90       	pop	r5
     7a2:	4f 90       	pop	r4
     7a4:	3f 90       	pop	r3
     7a6:	2f 90       	pop	r2
     7a8:	08 95       	ret

000007aa <wiinunchuck_getjoyX>:
	return (int)wiinunchuck_joyX;

	#else

	#if WIINUNCHUCK_JOYCENTERB == 1
	int joyX = (int)wiinunchuck_joyX;
     7aa:	20 91 81 02 	lds	r18, 0x0281
     7ae:	30 e0       	ldi	r19, 0x00	; 0
	if(joyX <= WIINUNCHUCK_CENTERJOYX)
     7b0:	2f 38       	cpi	r18, 0x8F	; 143
     7b2:	31 05       	cpc	r19, r1
     7b4:	64 f4       	brge	.+24     	; 0x7ce <wiinunchuck_getjoyX+0x24>
		joyX = (joyX - WIINUNCHUCK_INMINJOYX) * (127 - 0) / (WIINUNCHUCK_CENTERJOYX - WIINUNCHUCK_INMINJOYX) + 0;
     7b6:	c9 01       	movw	r24, r18
     7b8:	96 95       	lsr	r25
     7ba:	98 2f       	mov	r25, r24
     7bc:	88 27       	eor	r24, r24
     7be:	97 95       	ror	r25
     7c0:	87 95       	ror	r24
     7c2:	82 1b       	sub	r24, r18
     7c4:	93 0b       	sbc	r25, r19
     7c6:	6e e8       	ldi	r22, 0x8E	; 142
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	54 d1       	rcall	.+680    	; 0xa74 <__divmodhi4>
     7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <wiinunchuck_getjoyX+0x3e>
	else
		joyX = (joyX - WIINUNCHUCK_CENTERJOYX) * (255 - 127) / (WIINUNCHUCK_INMAXJOYX - WIINUNCHUCK_CENTERJOYX) + 127 - 1;
     7ce:	2e 58       	subi	r18, 0x8E	; 142
     7d0:	31 09       	sbc	r19, r1
     7d2:	c9 01       	movw	r24, r18
     7d4:	96 95       	lsr	r25
     7d6:	98 2f       	mov	r25, r24
     7d8:	88 27       	eor	r24, r24
     7da:	97 95       	ror	r25
     7dc:	87 95       	ror	r24
     7de:	61 e7       	ldi	r22, 0x71	; 113
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	48 d1       	rcall	.+656    	; 0xa74 <__divmodhi4>
     7e4:	62 58       	subi	r22, 0x82	; 130
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
	return joyX-127;
     7e8:	6f 57       	subi	r22, 0x7F	; 127
     7ea:	71 09       	sbc	r23, r1
	#else
	return (int)wiinunchuck_joyX - WIINUNCHUCK_DEFAULTZEROJOYX;
	#endif

	#endif
}
     7ec:	86 2f       	mov	r24, r22
     7ee:	97 2f       	mov	r25, r23
     7f0:	08 95       	ret

000007f2 <wiinunchuck_getjoyY>:
	return (int)wiinunchuck_joyY;

	#else

	#if WIINUNCHUCK_JOYCENTERB == 1
	int joyY = (int)wiinunchuck_joyY;
     7f2:	20 91 80 02 	lds	r18, 0x0280
     7f6:	30 e0       	ldi	r19, 0x00	; 0
	if(joyY <= WIINUNCHUCK_CENTERJOYY)
     7f8:	20 38       	cpi	r18, 0x80	; 128
     7fa:	31 05       	cpc	r19, r1
     7fc:	64 f4       	brge	.+24     	; 0x816 <wiinunchuck_getjoyY+0x24>
		joyY = (joyY - WIINUNCHUCK_INMINJOYY) * (127 - 0) / (WIINUNCHUCK_CENTERJOYY - WIINUNCHUCK_INMINJOYY) + 0;
     7fe:	c9 01       	movw	r24, r18
     800:	96 95       	lsr	r25
     802:	98 2f       	mov	r25, r24
     804:	88 27       	eor	r24, r24
     806:	97 95       	ror	r25
     808:	87 95       	ror	r24
     80a:	82 1b       	sub	r24, r18
     80c:	93 0b       	sbc	r25, r19
     80e:	6f e7       	ldi	r22, 0x7F	; 127
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	30 d1       	rcall	.+608    	; 0xa74 <__divmodhi4>
     814:	12 c0       	rjmp	.+36     	; 0x83a <wiinunchuck_getjoyY+0x48>
	else
		joyY = (joyY - WIINUNCHUCK_CENTERJOYY) * (255 - 127) / (WIINUNCHUCK_INMAXJOYY - WIINUNCHUCK_CENTERJOYY) + 127 - 1;
     816:	2f 57       	subi	r18, 0x7F	; 127
     818:	31 09       	sbc	r19, r1
     81a:	b9 01       	movw	r22, r18
     81c:	76 95       	lsr	r23
     81e:	76 2f       	mov	r23, r22
     820:	66 27       	eor	r22, r22
     822:	77 95       	ror	r23
     824:	67 95       	ror	r22
     826:	30 ff       	sbrs	r19, 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <wiinunchuck_getjoyY+0x3c>
     82a:	61 58       	subi	r22, 0x81	; 129
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	66 0f       	add	r22, r22
     830:	67 2f       	mov	r22, r23
     832:	66 1f       	adc	r22, r22
     834:	77 0b       	sbc	r23, r23
     836:	62 58       	subi	r22, 0x82	; 130
     838:	7f 4f       	sbci	r23, 0xFF	; 255
	return joyY-127;
     83a:	6f 57       	subi	r22, 0x7F	; 127
     83c:	71 09       	sbc	r23, r1
	#else
	return (int)wiinunchuck_joyY - WIINUNCHUCK_DEFAULTZEROJOYY;
	#endif

	#endif
}
     83e:	86 2f       	mov	r24, r22
     840:	97 2f       	mov	r25, r23
     842:	08 95       	ret

00000844 <wiinunchuck_getbuttonZ>:
 */
uint8_t wiinunchuck_getbuttonZ() {
	#if WIINUNCHUCK_PULSEBUTTON == 1
	return (wiinunchuck_buttonZ && !wiinunchuck_lastbuttonZ);
	#else
	return wiinunchuck_buttonZ;
     844:	80 91 7f 02 	lds	r24, 0x027F
	#endif
}
     848:	08 95       	ret

0000084a <wiinunchuck_getbuttonC>:
 */
uint8_t wiinunchuck_getbuttonC() {
	#if WIINUNCHUCK_PULSEBUTTON == 1
	return (wiinunchuck_buttonC && !wiinunchuck_lastbuttonC);
	#else
	return wiinunchuck_buttonC;
     84a:	80 91 7e 02 	lds	r24, 0x027E
	#endif
}
     84e:	08 95       	ret

00000850 <wiinunchuck_getangleX>:
 */
int wiinunchuck_getangleX() {
	#if WIINUNCHUCK_GETNONCALIBRATED == 1
	return wiinunchuck_angleX;
	#else
	return wiinunchuck_angleX - WIINUNCHUCK_ZEROANGLEX;
     850:	20 91 7c 02 	lds	r18, 0x027C
     854:	30 91 7d 02 	lds	r19, 0x027D
     858:	2f 50       	subi	r18, 0x0F	; 15
     85a:	32 40       	sbci	r19, 0x02	; 2
	#endif
}
     85c:	82 2f       	mov	r24, r18
     85e:	93 2f       	mov	r25, r19
     860:	08 95       	ret

00000862 <wiinunchuck_getangleY>:
 */
int wiinunchuck_getangleY() {
	#if WIINUNCHUCK_GETNONCALIBRATED == 1
	return wiinunchuck_angleY;
	#else
	return wiinunchuck_angleY - WIINUNCHUCK_ZEROANGLEY;
     862:	20 91 7a 02 	lds	r18, 0x027A
     866:	30 91 7b 02 	lds	r19, 0x027B
     86a:	23 51       	subi	r18, 0x13	; 19
     86c:	32 40       	sbci	r19, 0x02	; 2
	#endif
}
     86e:	82 2f       	mov	r24, r18
     870:	93 2f       	mov	r25, r19
     872:	08 95       	ret

00000874 <wiinunchuck_getangleZ>:

/*
 * get angle Z
 */
int wiinunchuck_getangleZ() {
	return wiinunchuck_angleZ - WIINUNCHUCK_ZEROANGLEZ;
     874:	20 91 78 02 	lds	r18, 0x0278
     878:	30 91 79 02 	lds	r19, 0x0279
     87c:	22 51       	subi	r18, 0x12	; 18
     87e:	32 40       	sbci	r19, 0x02	; 2
}
     880:	82 2f       	mov	r24, r18
     882:	93 2f       	mov	r25, r19
     884:	08 95       	ret

00000886 <wiinunchuck_avaragefilter>:

#if WIINUNCHUCK_ANGLEFILTER == 1
/*
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	db 01       	movw	r26, r22
     88c:	fb 01       	movw	r30, r22
     88e:	45 e1       	ldi	r20, 0x15	; 21
	uint8_t i=0;
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
     890:	22 81       	ldd	r18, Z+2	; 0x02
     892:	33 81       	ldd	r19, Z+3	; 0x03
     894:	21 93       	st	Z+, r18
     896:	31 93       	st	Z+, r19
     898:	41 50       	subi	r20, 0x01	; 1
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     89a:	d1 f7       	brne	.-12     	; 0x890 <wiinunchuck_avaragefilter+0xa>
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
     89c:	fb 01       	movw	r30, r22
     89e:	91 a7       	std	Z+41, r25	; 0x29
     8a0:	80 a7       	std	Z+40, r24	; 0x28
/*
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
	uint8_t i=0;
	long sum=0;
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cb 01       	movw	r24, r22
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		sum += wiinunchuck_avarageangle[i];
     8a8:	0d 91       	ld	r16, X+
     8aa:	1d 91       	ld	r17, X+
     8ac:	22 27       	eor	r18, r18
     8ae:	17 fd       	sbrc	r17, 7
     8b0:	20 95       	com	r18
     8b2:	32 2f       	mov	r19, r18
     8b4:	60 0f       	add	r22, r16
     8b6:	71 1f       	adc	r23, r17
     8b8:	82 1f       	adc	r24, r18
     8ba:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	45 31       	cpi	r20, 0x15	; 21
     8c0:	99 f7       	brne	.-26     	; 0x8a8 <wiinunchuck_avaragefilter+0x22>
		sum += wiinunchuck_avarageangle[i];
	}
	return (sum/WIINUNCHUCK_ANGLEAVARAGECOEF);
     8c2:	25 e1       	ldi	r18, 0x15	; 21
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	e7 d0       	rcall	.+462    	; 0xa9a <__divmodsi4>
}
     8cc:	82 2f       	mov	r24, r18
     8ce:	93 2f       	mov	r25, r19
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <wiinunchuck_update>:
#endif

/*
 * get new data
 */
void wiinunchuck_update() {
     8d6:	af 92       	push	r10
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <wiinunchuck_update+0x16>
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <wiinunchuck_update+0x18>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i=0;
	uint8_t buff[WIINUNCHUCK_READBYTES];
	memset(buff, 0, sizeof(buff));
     8f2:	ee 24       	eor	r14, r14
     8f4:	e3 94       	inc	r14
     8f6:	f1 2c       	mov	r15, r1
     8f8:	ec 0e       	add	r14, r28
     8fa:	fd 1e       	adc	r15, r29
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	f7 01       	movw	r30, r14
     900:	11 92       	st	Z+, r1
     902:	8a 95       	dec	r24
     904:	e9 f7       	brne	.-6      	; 0x900 <wiinunchuck_update+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     906:	8f e3       	ldi	r24, 0x3F	; 63
     908:	96 e0       	ldi	r25, 0x06	; 6
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <wiinunchuck_update+0x34>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <wiinunchuck_update+0x3a>
     910:	00 00       	nop

	//request data
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     912:	84 ea       	ldi	r24, 0xA4	; 164
     914:	f7 dc       	rcall	.-1554   	; 0x304 <i2c_start_wait>
	i2c_write(0x00);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	26 dd       	rcall	.-1460   	; 0x366 <i2c_write>
	i2c_stop();
     91a:	1c dd       	rcall	.-1480   	; 0x354 <i2c_stop>
     91c:	ef e3       	ldi	r30, 0x3F	; 63
     91e:	f6 e0       	ldi	r31, 0x06	; 6
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <wiinunchuck_update+0x4a>
     924:	00 c0       	rjmp	.+0      	; 0x926 <wiinunchuck_update+0x50>
     926:	00 00       	nop
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
     928:	85 ea       	ldi	r24, 0xA5	; 165
     92a:	ec dc       	rcall	.-1576   	; 0x304 <i2c_start_wait>
     92c:	87 01       	movw	r16, r14
#endif

/*
 * get new data
 */
void wiinunchuck_update() {
     92e:	6e 01       	movw	r12, r28
     930:	f7 e0       	ldi	r31, 0x07	; 7
     932:	cf 0e       	add	r12, r31
     934:	d1 1c       	adc	r13, r1
     936:	5e 01       	movw	r10, r28
     938:	36 e0       	ldi	r19, 0x06	; 6
     93a:	a3 0e       	add	r10, r19
     93c:	b1 1c       	adc	r11, r1
     93e:	06 c0       	rjmp	.+12     	; 0x94c <wiinunchuck_update+0x76>
	i2c_write(0x00);
	i2c_stop();
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
		if(i==WIINUNCHUCK_READBYTES-1)
     940:	ea 14       	cp	r14, r10
     942:	fb 04       	cpc	r15, r11
     944:	19 f4       	brne	.+6      	; 0x94c <wiinunchuck_update+0x76>
			buff[i] = i2c_readNak();
     946:	2c dd       	rcall	.-1448   	; 0x3a0 <i2c_readNak>
     948:	8e 83       	std	Y+6, r24	; 0x06
     94a:	07 c0       	rjmp	.+14     	; 0x95a <wiinunchuck_update+0x84>
		else
			buff[i] = i2c_readAck();
     94c:	1e dd       	rcall	.-1476   	; 0x38a <i2c_readAck>
     94e:	f7 01       	movw	r30, r14
     950:	81 93       	st	Z+, r24
     952:	7f 01       	movw	r14, r30
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
	i2c_write(0x00);
	i2c_stop();
	_delay_us(400);
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     954:	ec 15       	cp	r30, r12
     956:	fd 05       	cpc	r31, r13
     958:	99 f7       	brne	.-26     	; 0x940 <wiinunchuck_update+0x6a>
		if(i==WIINUNCHUCK_READBYTES-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     95a:	fc dc       	rcall	.-1544   	; 0x354 <i2c_stop>
     95c:	8f e3       	ldi	r24, 0x3F	; 63
     95e:	96 e0       	ldi	r25, 0x06	; 6
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <wiinunchuck_update+0x8a>
     964:	00 c0       	rjmp	.+0      	; 0x966 <wiinunchuck_update+0x90>
     966:	00 00       	nop
	_delay_us(400);

	//decodebyte
	#if WIINUNCHUCK_DECODEBYTE == 1
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
		buff[i] = wiinunchuck_decode(buff[i]);
     968:	97 e1       	ldi	r25, 0x17	; 23
     96a:	f8 01       	movw	r30, r16
     96c:	80 81       	ld	r24, Z
     96e:	89 27       	eor	r24, r25
     970:	89 5e       	subi	r24, 0xE9	; 233
     972:	81 93       	st	Z+, r24
     974:	8f 01       	movw	r16, r30
	i2c_stop();
	_delay_us(400);

	//decodebyte
	#if WIINUNCHUCK_DECODEBYTE == 1
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     976:	ec 15       	cp	r30, r12
     978:	fd 05       	cpc	r31, r13
     97a:	b9 f7       	brne	.-18     	; 0x96a <wiinunchuck_update+0x94>
	wiinunchuck_lastbuttonZ = wiinunchuck_buttonZ;
	wiinunchuck_lastbuttonC = wiinunchuck_buttonC;
	#endif

	//get joypad
	wiinunchuck_joyX = buff[0];
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	80 93 81 02 	sts	0x0281, r24
	wiinunchuck_joyY = buff[1];
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	80 93 80 02 	sts	0x0280, r24

	//get button
	wiinunchuck_buttonZ = !(buff[5] & 0b00000001);
     988:	8e 81       	ldd	r24, Y+6	; 0x06
     98a:	98 2f       	mov	r25, r24
     98c:	90 95       	com	r25
     98e:	91 70       	andi	r25, 0x01	; 1
     990:	90 93 7f 02 	sts	0x027F, r25
	wiinunchuck_buttonC = !((buff[5] & 0b00000010) >> 1);
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	81 fd       	sbrc	r24, 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 7e 02 	sts	0x027E, r25

	//get angle
	wiinunchuck_angleX = (buff[2] << 2) + ((buff[5] & (0b00000011 << (1*2)) >> (1*2)));
     99e:	83 70       	andi	r24, 0x03	; 3
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2b 81       	ldd	r18, Y+3	; 0x03
     9a4:	ac 01       	movw	r20, r24
     9a6:	64 e0       	ldi	r22, 0x04	; 4
     9a8:	26 9f       	mul	r18, r22
     9aa:	40 0d       	add	r20, r0
     9ac:	51 1d       	adc	r21, r1
     9ae:	11 24       	eor	r1, r1
     9b0:	50 93 7d 02 	sts	0x027D, r21
     9b4:	40 93 7c 02 	sts	0x027C, r20
	wiinunchuck_angleY = (buff[3] << 2) + ((buff[5] & (0b00000011 << (2*2)) >> (2*2)));
     9b8:	2c 81       	ldd	r18, Y+4	; 0x04
     9ba:	fc 01       	movw	r30, r24
     9bc:	44 e0       	ldi	r20, 0x04	; 4
     9be:	24 9f       	mul	r18, r20
     9c0:	e0 0d       	add	r30, r0
     9c2:	f1 1d       	adc	r31, r1
     9c4:	11 24       	eor	r1, r1
     9c6:	f0 93 7b 02 	sts	0x027B, r31
     9ca:	e0 93 7a 02 	sts	0x027A, r30
	wiinunchuck_angleZ = (buff[4] << 2) + ((buff[5] & (0b00000011 << (3*2)) >> (3*2)));
     9ce:	2d 81       	ldd	r18, Y+5	; 0x05
     9d0:	54 e0       	ldi	r21, 0x04	; 4
     9d2:	25 9f       	mul	r18, r21
     9d4:	80 0d       	add	r24, r0
     9d6:	91 1d       	adc	r25, r1
     9d8:	11 24       	eor	r1, r1
     9da:	90 93 79 02 	sts	0x0279, r25
     9de:	80 93 78 02 	sts	0x0278, r24

	//filter angle
	#if WIINUNCHUCK_ANGLEFILTER == 1
	wiinunchuck_angleX = wiinunchuck_avaragefilter(wiinunchuck_angleX, (int *)wiinunchuck_avarageangleX);
     9e2:	80 91 7c 02 	lds	r24, 0x027C
     9e6:	90 91 7d 02 	lds	r25, 0x027D
     9ea:	6b eb       	ldi	r22, 0xBB	; 187
     9ec:	72 e0       	ldi	r23, 0x02	; 2
     9ee:	4b df       	rcall	.-362    	; 0x886 <wiinunchuck_avaragefilter>
     9f0:	90 93 7d 02 	sts	0x027D, r25
     9f4:	80 93 7c 02 	sts	0x027C, r24
	wiinunchuck_angleY = wiinunchuck_avaragefilter(wiinunchuck_angleY, (int *)wiinunchuck_avarageangleY);
     9f8:	80 91 7a 02 	lds	r24, 0x027A
     9fc:	90 91 7b 02 	lds	r25, 0x027B
     a00:	61 e9       	ldi	r22, 0x91	; 145
     a02:	72 e0       	ldi	r23, 0x02	; 2
     a04:	40 df       	rcall	.-384    	; 0x886 <wiinunchuck_avaragefilter>
     a06:	90 93 7b 02 	sts	0x027B, r25
     a0a:	80 93 7a 02 	sts	0x027A, r24
	wiinunchuck_angleZ = wiinunchuck_avaragefilter(wiinunchuck_angleZ, (int *)wiinunchuck_avarageangleZ);
     a0e:	80 91 78 02 	lds	r24, 0x0278
     a12:	90 91 79 02 	lds	r25, 0x0279
     a16:	65 ee       	ldi	r22, 0xE5	; 229
     a18:	72 e0       	ldi	r23, 0x02	; 2
     a1a:	35 df       	rcall	.-406    	; 0x886 <wiinunchuck_avaragefilter>
     a1c:	90 93 79 02 	sts	0x0279, r25
     a20:	80 93 78 02 	sts	0x0278, r24
	#endif
}
     a24:	26 96       	adiw	r28, 0x06	; 6
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	08 95       	ret

00000a46 <wiinunchuck_init>:
 * init wiinunchuck
 */
void wiinunchuck_init() {
	#if WIINUNCHUCK_I2CINIT == 1
	//init i2c
	i2c_init();
     a46:	58 dc       	rcall	.-1872   	; 0x2f8 <i2c_init>
     a48:	8f e8       	ldi	r24, 0x8F	; 143
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <wiinunchuck_init+0x6>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <wiinunchuck_init+0xc>
     a52:	00 00       	nop
	#endif

	//standard init: 0x40 -> 0x00
	//alternative init: 0xF0 -> 0x55 followed by 0xFB -> 0x00, lets us use 3rd party nunchucks
	//no longer need to decode bytes in _nunchuk_decode_byte
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     a54:	84 ea       	ldi	r24, 0xA4	; 164
     a56:	56 dc       	rcall	.-1876   	; 0x304 <i2c_start_wait>
	i2c_write(0x40);	//0xF0
     a58:	80 e4       	ldi	r24, 0x40	; 64
     a5a:	85 dc       	rcall	.-1782   	; 0x366 <i2c_write>
	i2c_write(0x00);	//0x55
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	83 dc       	rcall	.-1786   	; 0x366 <i2c_write>
	i2c_stop();
     a60:	79 dc       	rcall	.-1806   	; 0x354 <i2c_stop>
	printf("after stop");
     a62:	85 e6       	ldi	r24, 0x65	; 101
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	68 d0       	rcall	.+208    	; 0xb3c <printf>
	i2c_write(0x00);	//0x00
	i2c_stop();
	//update
	printf("before update");
	*/
	wiinunchuck_update();
     a6c:	34 df       	rcall	.-408    	; 0x8d6 <wiinunchuck_update>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	08 95       	ret

00000a74 <__divmodhi4>:
     a74:	97 fb       	bst	r25, 7
     a76:	07 2e       	mov	r0, r23
     a78:	16 f4       	brtc	.+4      	; 0xa7e <__divmodhi4+0xa>
     a7a:	00 94       	com	r0
     a7c:	06 d0       	rcall	.+12     	; 0xa8a <__divmodhi4_neg1>
     a7e:	77 fd       	sbrc	r23, 7
     a80:	08 d0       	rcall	.+16     	; 0xa92 <__divmodhi4_neg2>
     a82:	26 d0       	rcall	.+76     	; 0xad0 <__udivmodhi4>
     a84:	07 fc       	sbrc	r0, 7
     a86:	05 d0       	rcall	.+10     	; 0xa92 <__divmodhi4_neg2>
     a88:	3e f4       	brtc	.+14     	; 0xa98 <__divmodhi4_exit>

00000a8a <__divmodhi4_neg1>:
     a8a:	90 95       	com	r25
     a8c:	81 95       	neg	r24
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	08 95       	ret

00000a92 <__divmodhi4_neg2>:
     a92:	70 95       	com	r23
     a94:	61 95       	neg	r22
     a96:	7f 4f       	sbci	r23, 0xFF	; 255

00000a98 <__divmodhi4_exit>:
     a98:	08 95       	ret

00000a9a <__divmodsi4>:
     a9a:	05 2e       	mov	r0, r21
     a9c:	97 fb       	bst	r25, 7
     a9e:	16 f4       	brtc	.+4      	; 0xaa4 <__divmodsi4+0xa>
     aa0:	00 94       	com	r0
     aa2:	06 d0       	rcall	.+12     	; 0xab0 <__divmodsi4_neg1>
     aa4:	57 fd       	sbrc	r21, 7
     aa6:	0c d0       	rcall	.+24     	; 0xac0 <__divmodsi4_neg2>
     aa8:	27 d0       	rcall	.+78     	; 0xaf8 <__udivmodsi4>
     aaa:	07 fc       	sbrc	r0, 7
     aac:	09 d0       	rcall	.+18     	; 0xac0 <__divmodsi4_neg2>
     aae:	7e f4       	brtc	.+30     	; 0xace <__divmodsi4_exit>

00000ab0 <__divmodsi4_neg1>:
     ab0:	90 95       	com	r25
     ab2:	80 95       	com	r24
     ab4:	70 95       	com	r23
     ab6:	61 95       	neg	r22
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	8f 4f       	sbci	r24, 0xFF	; 255
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	08 95       	ret

00000ac0 <__divmodsi4_neg2>:
     ac0:	50 95       	com	r21
     ac2:	40 95       	com	r20
     ac4:	30 95       	com	r19
     ac6:	21 95       	neg	r18
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	4f 4f       	sbci	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255

00000ace <__divmodsi4_exit>:
     ace:	08 95       	ret

00000ad0 <__udivmodhi4>:
     ad0:	aa 1b       	sub	r26, r26
     ad2:	bb 1b       	sub	r27, r27
     ad4:	51 e1       	ldi	r21, 0x11	; 17
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <__udivmodhi4_ep>

00000ad8 <__udivmodhi4_loop>:
     ad8:	aa 1f       	adc	r26, r26
     ada:	bb 1f       	adc	r27, r27
     adc:	a6 17       	cp	r26, r22
     ade:	b7 07       	cpc	r27, r23
     ae0:	10 f0       	brcs	.+4      	; 0xae6 <__udivmodhi4_ep>
     ae2:	a6 1b       	sub	r26, r22
     ae4:	b7 0b       	sbc	r27, r23

00000ae6 <__udivmodhi4_ep>:
     ae6:	88 1f       	adc	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	5a 95       	dec	r21
     aec:	a9 f7       	brne	.-22     	; 0xad8 <__udivmodhi4_loop>
     aee:	80 95       	com	r24
     af0:	90 95       	com	r25
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	08 95       	ret

00000af8 <__udivmodsi4>:
     af8:	a1 e2       	ldi	r26, 0x21	; 33
     afa:	1a 2e       	mov	r1, r26
     afc:	aa 1b       	sub	r26, r26
     afe:	bb 1b       	sub	r27, r27
     b00:	fd 01       	movw	r30, r26
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__udivmodsi4_ep>

00000b04 <__udivmodsi4_loop>:
     b04:	aa 1f       	adc	r26, r26
     b06:	bb 1f       	adc	r27, r27
     b08:	ee 1f       	adc	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	a2 17       	cp	r26, r18
     b0e:	b3 07       	cpc	r27, r19
     b10:	e4 07       	cpc	r30, r20
     b12:	f5 07       	cpc	r31, r21
     b14:	20 f0       	brcs	.+8      	; 0xb1e <__udivmodsi4_ep>
     b16:	a2 1b       	sub	r26, r18
     b18:	b3 0b       	sbc	r27, r19
     b1a:	e4 0b       	sbc	r30, r20
     b1c:	f5 0b       	sbc	r31, r21

00000b1e <__udivmodsi4_ep>:
     b1e:	66 1f       	adc	r22, r22
     b20:	77 1f       	adc	r23, r23
     b22:	88 1f       	adc	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	1a 94       	dec	r1
     b28:	69 f7       	brne	.-38     	; 0xb04 <__udivmodsi4_loop>
     b2a:	60 95       	com	r22
     b2c:	70 95       	com	r23
     b2e:	80 95       	com	r24
     b30:	90 95       	com	r25
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	bd 01       	movw	r22, r26
     b38:	cf 01       	movw	r24, r30
     b3a:	08 95       	ret

00000b3c <printf>:
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	fe 01       	movw	r30, r28
     b46:	36 96       	adiw	r30, 0x06	; 6
     b48:	61 91       	ld	r22, Z+
     b4a:	71 91       	ld	r23, Z+
     b4c:	af 01       	movw	r20, r30
     b4e:	80 91 11 03 	lds	r24, 0x0311
     b52:	90 91 12 03 	lds	r25, 0x0312
     b56:	32 d0       	rcall	.+100    	; 0xbbc <vfprintf>
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <puts>:
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	8c 01       	movw	r16, r24
     b68:	e0 91 11 03 	lds	r30, 0x0311
     b6c:	f0 91 12 03 	lds	r31, 0x0312
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	81 ff       	sbrs	r24, 1
     b74:	1b c0       	rjmp	.+54     	; 0xbac <puts+0x4e>
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <puts+0x28>
     b7c:	19 95       	eicall
     b7e:	89 2b       	or	r24, r25
     b80:	11 f0       	breq	.+4      	; 0xb86 <puts+0x28>
     b82:	cf ef       	ldi	r28, 0xFF	; 255
     b84:	df ef       	ldi	r29, 0xFF	; 255
     b86:	f8 01       	movw	r30, r16
     b88:	81 91       	ld	r24, Z+
     b8a:	8f 01       	movw	r16, r30
     b8c:	60 91 11 03 	lds	r22, 0x0311
     b90:	70 91 12 03 	lds	r23, 0x0312
     b94:	db 01       	movw	r26, r22
     b96:	18 96       	adiw	r26, 0x08	; 8
     b98:	ed 91       	ld	r30, X+
     b9a:	fc 91       	ld	r31, X
     b9c:	19 97       	sbiw	r26, 0x09	; 9
     b9e:	81 11       	cpse	r24, r1
     ba0:	ed cf       	rjmp	.-38     	; 0xb7c <puts+0x1e>
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	19 95       	eicall
     ba6:	89 2b       	or	r24, r25
     ba8:	09 f4       	brne	.+2      	; 0xbac <puts+0x4e>
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <puts+0x52>
     bac:	cf ef       	ldi	r28, 0xFF	; 255
     bae:	df ef       	ldi	r29, 0xFF	; 255
     bb0:	ce 01       	movw	r24, r28
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <vfprintf>:
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	2c 97       	sbiw	r28, 0x0c	; 12
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	7c 01       	movw	r14, r24
     bf2:	6b 01       	movw	r12, r22
     bf4:	8a 01       	movw	r16, r20
     bf6:	fc 01       	movw	r30, r24
     bf8:	17 82       	std	Z+7, r1	; 0x07
     bfa:	16 82       	std	Z+6, r1	; 0x06
     bfc:	83 81       	ldd	r24, Z+3	; 0x03
     bfe:	81 ff       	sbrs	r24, 1
     c00:	b9 c1       	rjmp	.+882    	; 0xf74 <vfprintf+0x3b8>
     c02:	88 24       	eor	r8, r8
     c04:	83 94       	inc	r8
     c06:	91 2c       	mov	r9, r1
     c08:	8c 0e       	add	r8, r28
     c0a:	9d 1e       	adc	r9, r29
     c0c:	f7 01       	movw	r30, r14
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	f6 01       	movw	r30, r12
     c12:	93 fd       	sbrc	r25, 3
     c14:	85 91       	lpm	r24, Z+
     c16:	93 ff       	sbrs	r25, 3
     c18:	81 91       	ld	r24, Z+
     c1a:	6f 01       	movw	r12, r30
     c1c:	88 23       	and	r24, r24
     c1e:	09 f4       	brne	.+2      	; 0xc22 <vfprintf+0x66>
     c20:	a5 c1       	rjmp	.+842    	; 0xf6c <vfprintf+0x3b0>
     c22:	85 32       	cpi	r24, 0x25	; 37
     c24:	39 f4       	brne	.+14     	; 0xc34 <vfprintf+0x78>
     c26:	93 fd       	sbrc	r25, 3
     c28:	85 91       	lpm	r24, Z+
     c2a:	93 ff       	sbrs	r25, 3
     c2c:	81 91       	ld	r24, Z+
     c2e:	6f 01       	movw	r12, r30
     c30:	85 32       	cpi	r24, 0x25	; 37
     c32:	21 f4       	brne	.+8      	; 0xc3c <vfprintf+0x80>
     c34:	b7 01       	movw	r22, r14
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	cf d1       	rcall	.+926    	; 0xfd8 <fputc>
     c3a:	e8 cf       	rjmp	.-48     	; 0xc0c <vfprintf+0x50>
     c3c:	51 2c       	mov	r5, r1
     c3e:	31 2c       	mov	r3, r1
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	20 32       	cpi	r18, 0x20	; 32
     c44:	a8 f4       	brcc	.+42     	; 0xc70 <vfprintf+0xb4>
     c46:	8b 32       	cpi	r24, 0x2B	; 43
     c48:	61 f0       	breq	.+24     	; 0xc62 <vfprintf+0xa6>
     c4a:	28 f4       	brcc	.+10     	; 0xc56 <vfprintf+0x9a>
     c4c:	80 32       	cpi	r24, 0x20	; 32
     c4e:	51 f0       	breq	.+20     	; 0xc64 <vfprintf+0xa8>
     c50:	83 32       	cpi	r24, 0x23	; 35
     c52:	71 f4       	brne	.+28     	; 0xc70 <vfprintf+0xb4>
     c54:	0b c0       	rjmp	.+22     	; 0xc6c <vfprintf+0xb0>
     c56:	8d 32       	cpi	r24, 0x2D	; 45
     c58:	39 f0       	breq	.+14     	; 0xc68 <vfprintf+0xac>
     c5a:	80 33       	cpi	r24, 0x30	; 48
     c5c:	49 f4       	brne	.+18     	; 0xc70 <vfprintf+0xb4>
     c5e:	21 60       	ori	r18, 0x01	; 1
     c60:	28 c0       	rjmp	.+80     	; 0xcb2 <vfprintf+0xf6>
     c62:	22 60       	ori	r18, 0x02	; 2
     c64:	24 60       	ori	r18, 0x04	; 4
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <vfprintf+0xf6>
     c68:	28 60       	ori	r18, 0x08	; 8
     c6a:	23 c0       	rjmp	.+70     	; 0xcb2 <vfprintf+0xf6>
     c6c:	20 61       	ori	r18, 0x10	; 16
     c6e:	21 c0       	rjmp	.+66     	; 0xcb2 <vfprintf+0xf6>
     c70:	27 fd       	sbrc	r18, 7
     c72:	27 c0       	rjmp	.+78     	; 0xcc2 <vfprintf+0x106>
     c74:	38 2f       	mov	r19, r24
     c76:	30 53       	subi	r19, 0x30	; 48
     c78:	3a 30       	cpi	r19, 0x0A	; 10
     c7a:	78 f4       	brcc	.+30     	; 0xc9a <vfprintf+0xde>
     c7c:	26 ff       	sbrs	r18, 6
     c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0xd0>
     c80:	fa e0       	ldi	r31, 0x0A	; 10
     c82:	5f 9e       	mul	r5, r31
     c84:	30 0d       	add	r19, r0
     c86:	11 24       	eor	r1, r1
     c88:	53 2e       	mov	r5, r19
     c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <vfprintf+0xf6>
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	38 9e       	mul	r3, r24
     c90:	30 0d       	add	r19, r0
     c92:	11 24       	eor	r1, r1
     c94:	33 2e       	mov	r3, r19
     c96:	20 62       	ori	r18, 0x20	; 32
     c98:	0c c0       	rjmp	.+24     	; 0xcb2 <vfprintf+0xf6>
     c9a:	8e 32       	cpi	r24, 0x2E	; 46
     c9c:	21 f4       	brne	.+8      	; 0xca6 <vfprintf+0xea>
     c9e:	26 fd       	sbrc	r18, 6
     ca0:	65 c1       	rjmp	.+714    	; 0xf6c <vfprintf+0x3b0>
     ca2:	20 64       	ori	r18, 0x40	; 64
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0xf6>
     ca6:	8c 36       	cpi	r24, 0x6C	; 108
     ca8:	11 f4       	brne	.+4      	; 0xcae <vfprintf+0xf2>
     caa:	20 68       	ori	r18, 0x80	; 128
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0xf6>
     cae:	88 36       	cpi	r24, 0x68	; 104
     cb0:	41 f4       	brne	.+16     	; 0xcc2 <vfprintf+0x106>
     cb2:	f6 01       	movw	r30, r12
     cb4:	93 fd       	sbrc	r25, 3
     cb6:	85 91       	lpm	r24, Z+
     cb8:	93 ff       	sbrs	r25, 3
     cba:	81 91       	ld	r24, Z+
     cbc:	6f 01       	movw	r12, r30
     cbe:	81 11       	cpse	r24, r1
     cc0:	c0 cf       	rjmp	.-128    	; 0xc42 <vfprintf+0x86>
     cc2:	98 2f       	mov	r25, r24
     cc4:	95 54       	subi	r25, 0x45	; 69
     cc6:	93 30       	cpi	r25, 0x03	; 3
     cc8:	18 f0       	brcs	.+6      	; 0xcd0 <vfprintf+0x114>
     cca:	90 52       	subi	r25, 0x20	; 32
     ccc:	93 30       	cpi	r25, 0x03	; 3
     cce:	28 f4       	brcc	.+10     	; 0xcda <vfprintf+0x11e>
     cd0:	0c 5f       	subi	r16, 0xFC	; 252
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	ff e3       	ldi	r31, 0x3F	; 63
     cd6:	f9 83       	std	Y+1, r31	; 0x01
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <vfprintf+0x138>
     cda:	83 36       	cpi	r24, 0x63	; 99
     cdc:	31 f0       	breq	.+12     	; 0xcea <vfprintf+0x12e>
     cde:	83 37       	cpi	r24, 0x73	; 115
     ce0:	71 f0       	breq	.+28     	; 0xcfe <vfprintf+0x142>
     ce2:	83 35       	cpi	r24, 0x53	; 83
     ce4:	09 f0       	breq	.+2      	; 0xce8 <vfprintf+0x12c>
     ce6:	5a c0       	rjmp	.+180    	; 0xd9c <vfprintf+0x1e0>
     ce8:	22 c0       	rjmp	.+68     	; 0xd2e <vfprintf+0x172>
     cea:	f8 01       	movw	r30, r16
     cec:	80 81       	ld	r24, Z
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	0e 5f       	subi	r16, 0xFE	; 254
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	44 24       	eor	r4, r4
     cf6:	43 94       	inc	r4
     cf8:	51 2c       	mov	r5, r1
     cfa:	54 01       	movw	r10, r8
     cfc:	14 c0       	rjmp	.+40     	; 0xd26 <vfprintf+0x16a>
     cfe:	38 01       	movw	r6, r16
     d00:	f2 e0       	ldi	r31, 0x02	; 2
     d02:	6f 0e       	add	r6, r31
     d04:	71 1c       	adc	r7, r1
     d06:	f8 01       	movw	r30, r16
     d08:	a0 80       	ld	r10, Z
     d0a:	b1 80       	ldd	r11, Z+1	; 0x01
     d0c:	26 ff       	sbrs	r18, 6
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <vfprintf+0x15a>
     d10:	65 2d       	mov	r22, r5
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfprintf+0x15e>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	c5 01       	movw	r24, r10
     d1c:	2c 87       	std	Y+12, r18	; 0x0c
     d1e:	51 d1       	rcall	.+674    	; 0xfc2 <strnlen>
     d20:	2c 01       	movw	r4, r24
     d22:	83 01       	movw	r16, r6
     d24:	2c 85       	ldd	r18, Y+12	; 0x0c
     d26:	6f e7       	ldi	r22, 0x7F	; 127
     d28:	26 2e       	mov	r2, r22
     d2a:	22 22       	and	r2, r18
     d2c:	17 c0       	rjmp	.+46     	; 0xd5c <vfprintf+0x1a0>
     d2e:	38 01       	movw	r6, r16
     d30:	f2 e0       	ldi	r31, 0x02	; 2
     d32:	6f 0e       	add	r6, r31
     d34:	71 1c       	adc	r7, r1
     d36:	f8 01       	movw	r30, r16
     d38:	a0 80       	ld	r10, Z
     d3a:	b1 80       	ldd	r11, Z+1	; 0x01
     d3c:	26 ff       	sbrs	r18, 6
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x18a>
     d40:	65 2d       	mov	r22, r5
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x18e>
     d46:	6f ef       	ldi	r22, 0xFF	; 255
     d48:	7f ef       	ldi	r23, 0xFF	; 255
     d4a:	c5 01       	movw	r24, r10
     d4c:	2c 87       	std	Y+12, r18	; 0x0c
     d4e:	2e d1       	rcall	.+604    	; 0xfac <strnlen_P>
     d50:	2c 01       	movw	r4, r24
     d52:	2c 85       	ldd	r18, Y+12	; 0x0c
     d54:	50 e8       	ldi	r21, 0x80	; 128
     d56:	25 2e       	mov	r2, r21
     d58:	22 2a       	or	r2, r18
     d5a:	83 01       	movw	r16, r6
     d5c:	23 fc       	sbrc	r2, 3
     d5e:	1a c0       	rjmp	.+52     	; 0xd94 <vfprintf+0x1d8>
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <vfprintf+0x1b0>
     d62:	b7 01       	movw	r22, r14
     d64:	80 e2       	ldi	r24, 0x20	; 32
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	37 d1       	rcall	.+622    	; 0xfd8 <fputc>
     d6a:	3a 94       	dec	r3
     d6c:	83 2d       	mov	r24, r3
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	48 16       	cp	r4, r24
     d72:	59 06       	cpc	r5, r25
     d74:	b0 f3       	brcs	.-20     	; 0xd62 <vfprintf+0x1a6>
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <vfprintf+0x1d8>
     d78:	f5 01       	movw	r30, r10
     d7a:	27 fc       	sbrc	r2, 7
     d7c:	85 91       	lpm	r24, Z+
     d7e:	27 fe       	sbrs	r2, 7
     d80:	81 91       	ld	r24, Z+
     d82:	5f 01       	movw	r10, r30
     d84:	b7 01       	movw	r22, r14
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	27 d1       	rcall	.+590    	; 0xfd8 <fputc>
     d8a:	31 10       	cpse	r3, r1
     d8c:	3a 94       	dec	r3
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	4f 1a       	sub	r4, r31
     d92:	51 08       	sbc	r5, r1
     d94:	41 14       	cp	r4, r1
     d96:	51 04       	cpc	r5, r1
     d98:	79 f7       	brne	.-34     	; 0xd78 <vfprintf+0x1bc>
     d9a:	e5 c0       	rjmp	.+458    	; 0xf66 <vfprintf+0x3aa>
     d9c:	84 36       	cpi	r24, 0x64	; 100
     d9e:	11 f0       	breq	.+4      	; 0xda4 <vfprintf+0x1e8>
     da0:	89 36       	cpi	r24, 0x69	; 105
     da2:	39 f5       	brne	.+78     	; 0xdf2 <vfprintf+0x236>
     da4:	f8 01       	movw	r30, r16
     da6:	27 ff       	sbrs	r18, 7
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <vfprintf+0x1fc>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	0c 5f       	subi	r16, 0xFC	; 252
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <vfprintf+0x20c>
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 5f       	subi	r16, 0xFE	; 254
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	4f e6       	ldi	r20, 0x6F	; 111
     dca:	b4 2e       	mov	r11, r20
     dcc:	b2 22       	and	r11, r18
     dce:	97 ff       	sbrs	r25, 7
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x228>
     dd2:	90 95       	com	r25
     dd4:	80 95       	com	r24
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	f0 e8       	ldi	r31, 0x80	; 128
     de2:	bf 2a       	or	r11, r31
     de4:	2a e0       	ldi	r18, 0x0A	; 10
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	a4 01       	movw	r20, r8
     dea:	22 d1       	rcall	.+580    	; 0x1030 <__ultoa_invert>
     dec:	a8 2e       	mov	r10, r24
     dee:	a8 18       	sub	r10, r8
     df0:	42 c0       	rjmp	.+132    	; 0xe76 <vfprintf+0x2ba>
     df2:	85 37       	cpi	r24, 0x75	; 117
     df4:	31 f4       	brne	.+12     	; 0xe02 <vfprintf+0x246>
     df6:	3f ee       	ldi	r19, 0xEF	; 239
     df8:	b3 2e       	mov	r11, r19
     dfa:	b2 22       	and	r11, r18
     dfc:	2a e0       	ldi	r18, 0x0A	; 10
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	24 c0       	rjmp	.+72     	; 0xe4a <vfprintf+0x28e>
     e02:	99 ef       	ldi	r25, 0xF9	; 249
     e04:	b9 2e       	mov	r11, r25
     e06:	b2 22       	and	r11, r18
     e08:	8f 36       	cpi	r24, 0x6F	; 111
     e0a:	b9 f0       	breq	.+46     	; 0xe3a <vfprintf+0x27e>
     e0c:	20 f4       	brcc	.+8      	; 0xe16 <vfprintf+0x25a>
     e0e:	88 35       	cpi	r24, 0x58	; 88
     e10:	09 f0       	breq	.+2      	; 0xe14 <vfprintf+0x258>
     e12:	ac c0       	rjmp	.+344    	; 0xf6c <vfprintf+0x3b0>
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x274>
     e16:	80 37       	cpi	r24, 0x70	; 112
     e18:	21 f0       	breq	.+8      	; 0xe22 <vfprintf+0x266>
     e1a:	88 37       	cpi	r24, 0x78	; 120
     e1c:	09 f0       	breq	.+2      	; 0xe20 <vfprintf+0x264>
     e1e:	a6 c0       	rjmp	.+332    	; 0xf6c <vfprintf+0x3b0>
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x26a>
     e22:	20 e1       	ldi	r18, 0x10	; 16
     e24:	b2 2a       	or	r11, r18
     e26:	b4 fe       	sbrs	r11, 4
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <vfprintf+0x284>
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	b8 2a       	or	r11, r24
     e2e:	08 c0       	rjmp	.+16     	; 0xe40 <vfprintf+0x284>
     e30:	24 ff       	sbrs	r18, 4
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <vfprintf+0x28a>
     e34:	e6 e0       	ldi	r30, 0x06	; 6
     e36:	be 2a       	or	r11, r30
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <vfprintf+0x28a>
     e3a:	28 e0       	ldi	r18, 0x08	; 8
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <vfprintf+0x28e>
     e40:	20 e1       	ldi	r18, 0x10	; 16
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x28e>
     e46:	20 e1       	ldi	r18, 0x10	; 16
     e48:	32 e0       	ldi	r19, 0x02	; 2
     e4a:	f8 01       	movw	r30, r16
     e4c:	b7 fe       	sbrs	r11, 7
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <vfprintf+0x2a2>
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	0c 5f       	subi	r16, 0xFC	; 252
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <vfprintf+0x2ae>
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 5f       	subi	r16, 0xFE	; 254
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	a4 01       	movw	r20, r8
     e6c:	e1 d0       	rcall	.+450    	; 0x1030 <__ultoa_invert>
     e6e:	a8 2e       	mov	r10, r24
     e70:	a8 18       	sub	r10, r8
     e72:	ff e7       	ldi	r31, 0x7F	; 127
     e74:	bf 22       	and	r11, r31
     e76:	b6 fe       	sbrs	r11, 6
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <vfprintf+0x2d4>
     e7a:	2b 2d       	mov	r18, r11
     e7c:	2e 7f       	andi	r18, 0xFE	; 254
     e7e:	a5 14       	cp	r10, r5
     e80:	50 f4       	brcc	.+20     	; 0xe96 <vfprintf+0x2da>
     e82:	b4 fe       	sbrs	r11, 4
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <vfprintf+0x2de>
     e86:	b2 fc       	sbrc	r11, 2
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <vfprintf+0x2de>
     e8a:	2b 2d       	mov	r18, r11
     e8c:	2e 7e       	andi	r18, 0xEE	; 238
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <vfprintf+0x2de>
     e90:	7a 2c       	mov	r7, r10
     e92:	2b 2d       	mov	r18, r11
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <vfprintf+0x2e0>
     e96:	7a 2c       	mov	r7, r10
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <vfprintf+0x2e0>
     e9a:	75 2c       	mov	r7, r5
     e9c:	24 ff       	sbrs	r18, 4
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <vfprintf+0x2fe>
     ea0:	fe 01       	movw	r30, r28
     ea2:	ea 0d       	add	r30, r10
     ea4:	f1 1d       	adc	r31, r1
     ea6:	80 81       	ld	r24, Z
     ea8:	80 33       	cpi	r24, 0x30	; 48
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <vfprintf+0x2f4>
     eac:	29 7e       	andi	r18, 0xE9	; 233
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <vfprintf+0x306>
     eb0:	22 ff       	sbrs	r18, 2
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0x304>
     eb4:	73 94       	inc	r7
     eb6:	73 94       	inc	r7
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <vfprintf+0x306>
     eba:	82 2f       	mov	r24, r18
     ebc:	86 78       	andi	r24, 0x86	; 134
     ebe:	09 f0       	breq	.+2      	; 0xec2 <vfprintf+0x306>
     ec0:	73 94       	inc	r7
     ec2:	23 fd       	sbrc	r18, 3
     ec4:	13 c0       	rjmp	.+38     	; 0xeec <vfprintf+0x330>
     ec6:	20 ff       	sbrs	r18, 0
     ec8:	0e c0       	rjmp	.+28     	; 0xee6 <vfprintf+0x32a>
     eca:	5a 2c       	mov	r5, r10
     ecc:	73 14       	cp	r7, r3
     ece:	58 f4       	brcc	.+22     	; 0xee6 <vfprintf+0x32a>
     ed0:	53 0c       	add	r5, r3
     ed2:	57 18       	sub	r5, r7
     ed4:	73 2c       	mov	r7, r3
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <vfprintf+0x32a>
     ed8:	b7 01       	movw	r22, r14
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	2c 87       	std	Y+12, r18	; 0x0c
     ee0:	7b d0       	rcall	.+246    	; 0xfd8 <fputc>
     ee2:	73 94       	inc	r7
     ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee6:	73 14       	cp	r7, r3
     ee8:	b8 f3       	brcs	.-18     	; 0xed8 <vfprintf+0x31c>
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <vfprintf+0x338>
     eec:	73 14       	cp	r7, r3
     eee:	10 f4       	brcc	.+4      	; 0xef4 <vfprintf+0x338>
     ef0:	37 18       	sub	r3, r7
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <vfprintf+0x33a>
     ef4:	31 2c       	mov	r3, r1
     ef6:	24 ff       	sbrs	r18, 4
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <vfprintf+0x360>
     efa:	b7 01       	movw	r22, r14
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	2c 87       	std	Y+12, r18	; 0x0c
     f02:	6a d0       	rcall	.+212    	; 0xfd8 <fputc>
     f04:	2c 85       	ldd	r18, Y+12	; 0x0c
     f06:	22 ff       	sbrs	r18, 2
     f08:	1c c0       	rjmp	.+56     	; 0xf42 <vfprintf+0x386>
     f0a:	21 ff       	sbrs	r18, 1
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <vfprintf+0x358>
     f0e:	88 e5       	ldi	r24, 0x58	; 88
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x35c>
     f14:	88 e7       	ldi	r24, 0x78	; 120
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	b7 01       	movw	r22, r14
     f1a:	0c c0       	rjmp	.+24     	; 0xf34 <vfprintf+0x378>
     f1c:	82 2f       	mov	r24, r18
     f1e:	86 78       	andi	r24, 0x86	; 134
     f20:	81 f0       	breq	.+32     	; 0xf42 <vfprintf+0x386>
     f22:	21 fd       	sbrc	r18, 1
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x36e>
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <vfprintf+0x370>
     f2a:	8b e2       	ldi	r24, 0x2B	; 43
     f2c:	27 fd       	sbrc	r18, 7
     f2e:	8d e2       	ldi	r24, 0x2D	; 45
     f30:	b7 01       	movw	r22, r14
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	51 d0       	rcall	.+162    	; 0xfd8 <fputc>
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <vfprintf+0x386>
     f38:	b7 01       	movw	r22, r14
     f3a:	80 e3       	ldi	r24, 0x30	; 48
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	4c d0       	rcall	.+152    	; 0xfd8 <fputc>
     f40:	5a 94       	dec	r5
     f42:	a5 14       	cp	r10, r5
     f44:	c8 f3       	brcs	.-14     	; 0xf38 <vfprintf+0x37c>
     f46:	aa 94       	dec	r10
     f48:	f4 01       	movw	r30, r8
     f4a:	ea 0d       	add	r30, r10
     f4c:	f1 1d       	adc	r31, r1
     f4e:	b7 01       	movw	r22, r14
     f50:	80 81       	ld	r24, Z
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	41 d0       	rcall	.+130    	; 0xfd8 <fputc>
     f56:	a1 10       	cpse	r10, r1
     f58:	f6 cf       	rjmp	.-20     	; 0xf46 <vfprintf+0x38a>
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <vfprintf+0x3aa>
     f5c:	b7 01       	movw	r22, r14
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	3a d0       	rcall	.+116    	; 0xfd8 <fputc>
     f64:	3a 94       	dec	r3
     f66:	31 10       	cpse	r3, r1
     f68:	f9 cf       	rjmp	.-14     	; 0xf5c <vfprintf+0x3a0>
     f6a:	50 ce       	rjmp	.-864    	; 0xc0c <vfprintf+0x50>
     f6c:	f7 01       	movw	r30, r14
     f6e:	26 81       	ldd	r18, Z+6	; 0x06
     f70:	37 81       	ldd	r19, Z+7	; 0x07
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x3bc>
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	3f ef       	ldi	r19, 0xFF	; 255
     f78:	c9 01       	movw	r24, r18
     f7a:	2c 96       	adiw	r28, 0x0c	; 12
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	9f 90       	pop	r9
     f9c:	8f 90       	pop	r8
     f9e:	7f 90       	pop	r7
     fa0:	6f 90       	pop	r6
     fa2:	5f 90       	pop	r5
     fa4:	4f 90       	pop	r4
     fa6:	3f 90       	pop	r3
     fa8:	2f 90       	pop	r2
     faa:	08 95       	ret

00000fac <strnlen_P>:
     fac:	fc 01       	movw	r30, r24
     fae:	05 90       	lpm	r0, Z+
     fb0:	61 50       	subi	r22, 0x01	; 1
     fb2:	70 40       	sbci	r23, 0x00	; 0
     fb4:	01 10       	cpse	r0, r1
     fb6:	d8 f7       	brcc	.-10     	; 0xfae <strnlen_P+0x2>
     fb8:	80 95       	com	r24
     fba:	90 95       	com	r25
     fbc:	8e 0f       	add	r24, r30
     fbe:	9f 1f       	adc	r25, r31
     fc0:	08 95       	ret

00000fc2 <strnlen>:
     fc2:	fc 01       	movw	r30, r24
     fc4:	61 50       	subi	r22, 0x01	; 1
     fc6:	70 40       	sbci	r23, 0x00	; 0
     fc8:	01 90       	ld	r0, Z+
     fca:	01 10       	cpse	r0, r1
     fcc:	d8 f7       	brcc	.-10     	; 0xfc4 <strnlen+0x2>
     fce:	80 95       	com	r24
     fd0:	90 95       	com	r25
     fd2:	8e 0f       	add	r24, r30
     fd4:	9f 1f       	adc	r25, r31
     fd6:	08 95       	ret

00000fd8 <fputc>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	8c 01       	movw	r16, r24
     fe2:	eb 01       	movw	r28, r22
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 fd       	sbrc	r24, 1
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <fputc+0x18>
     fea:	0f ef       	ldi	r16, 0xFF	; 255
     fec:	1f ef       	ldi	r17, 0xFF	; 255
     fee:	1a c0       	rjmp	.+52     	; 0x1024 <fputc+0x4c>
     ff0:	82 ff       	sbrs	r24, 2
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <fputc+0x36>
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	64 f4       	brge	.+24     	; 0x101a <fputc+0x42>
    1002:	e8 81       	ld	r30, Y
    1004:	f9 81       	ldd	r31, Y+1	; 0x01
    1006:	01 93       	st	Z+, r16
    1008:	f9 83       	std	Y+1, r31	; 0x01
    100a:	e8 83       	st	Y, r30
    100c:	06 c0       	rjmp	.+12     	; 0x101a <fputc+0x42>
    100e:	e8 85       	ldd	r30, Y+8	; 0x08
    1010:	f9 85       	ldd	r31, Y+9	; 0x09
    1012:	80 2f       	mov	r24, r16
    1014:	19 95       	eicall
    1016:	89 2b       	or	r24, r25
    1018:	41 f7       	brne	.-48     	; 0xfea <fputc+0x12>
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	9f 81       	ldd	r25, Y+7	; 0x07
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	9f 83       	std	Y+7, r25	; 0x07
    1022:	8e 83       	std	Y+6, r24	; 0x06
    1024:	c8 01       	movw	r24, r16
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <__ultoa_invert>:
    1030:	fa 01       	movw	r30, r20
    1032:	aa 27       	eor	r26, r26
    1034:	28 30       	cpi	r18, 0x08	; 8
    1036:	51 f1       	breq	.+84     	; 0x108c <__ultoa_invert+0x5c>
    1038:	20 31       	cpi	r18, 0x10	; 16
    103a:	81 f1       	breq	.+96     	; 0x109c <__ultoa_invert+0x6c>
    103c:	e8 94       	clt
    103e:	6f 93       	push	r22
    1040:	6e 7f       	andi	r22, 0xFE	; 254
    1042:	6e 5f       	subi	r22, 0xFE	; 254
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	af 4f       	sbci	r26, 0xFF	; 255
    104c:	b1 e0       	ldi	r27, 0x01	; 1
    104e:	3e d0       	rcall	.+124    	; 0x10cc <__ultoa_invert+0x9c>
    1050:	b4 e0       	ldi	r27, 0x04	; 4
    1052:	3c d0       	rcall	.+120    	; 0x10cc <__ultoa_invert+0x9c>
    1054:	67 0f       	add	r22, r23
    1056:	78 1f       	adc	r23, r24
    1058:	89 1f       	adc	r24, r25
    105a:	9a 1f       	adc	r25, r26
    105c:	a1 1d       	adc	r26, r1
    105e:	68 0f       	add	r22, r24
    1060:	79 1f       	adc	r23, r25
    1062:	8a 1f       	adc	r24, r26
    1064:	91 1d       	adc	r25, r1
    1066:	a1 1d       	adc	r26, r1
    1068:	6a 0f       	add	r22, r26
    106a:	71 1d       	adc	r23, r1
    106c:	81 1d       	adc	r24, r1
    106e:	91 1d       	adc	r25, r1
    1070:	a1 1d       	adc	r26, r1
    1072:	20 d0       	rcall	.+64     	; 0x10b4 <__ultoa_invert+0x84>
    1074:	09 f4       	brne	.+2      	; 0x1078 <__ultoa_invert+0x48>
    1076:	68 94       	set
    1078:	3f 91       	pop	r19
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	26 9f       	mul	r18, r22
    107e:	11 24       	eor	r1, r1
    1080:	30 19       	sub	r19, r0
    1082:	30 5d       	subi	r19, 0xD0	; 208
    1084:	31 93       	st	Z+, r19
    1086:	de f6       	brtc	.-74     	; 0x103e <__ultoa_invert+0xe>
    1088:	cf 01       	movw	r24, r30
    108a:	08 95       	ret
    108c:	46 2f       	mov	r20, r22
    108e:	47 70       	andi	r20, 0x07	; 7
    1090:	40 5d       	subi	r20, 0xD0	; 208
    1092:	41 93       	st	Z+, r20
    1094:	b3 e0       	ldi	r27, 0x03	; 3
    1096:	0f d0       	rcall	.+30     	; 0x10b6 <__ultoa_invert+0x86>
    1098:	c9 f7       	brne	.-14     	; 0x108c <__ultoa_invert+0x5c>
    109a:	f6 cf       	rjmp	.-20     	; 0x1088 <__ultoa_invert+0x58>
    109c:	46 2f       	mov	r20, r22
    109e:	4f 70       	andi	r20, 0x0F	; 15
    10a0:	40 5d       	subi	r20, 0xD0	; 208
    10a2:	4a 33       	cpi	r20, 0x3A	; 58
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <__ultoa_invert+0x7c>
    10a6:	49 5d       	subi	r20, 0xD9	; 217
    10a8:	31 fd       	sbrc	r19, 1
    10aa:	40 52       	subi	r20, 0x20	; 32
    10ac:	41 93       	st	Z+, r20
    10ae:	02 d0       	rcall	.+4      	; 0x10b4 <__ultoa_invert+0x84>
    10b0:	a9 f7       	brne	.-22     	; 0x109c <__ultoa_invert+0x6c>
    10b2:	ea cf       	rjmp	.-44     	; 0x1088 <__ultoa_invert+0x58>
    10b4:	b4 e0       	ldi	r27, 0x04	; 4
    10b6:	a6 95       	lsr	r26
    10b8:	97 95       	ror	r25
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	ba 95       	dec	r27
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <__ultoa_invert+0x86>
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	61 05       	cpc	r22, r1
    10c8:	71 05       	cpc	r23, r1
    10ca:	08 95       	ret
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	0a 2e       	mov	r0, r26
    10d2:	06 94       	lsr	r0
    10d4:	57 95       	ror	r21
    10d6:	47 95       	ror	r20
    10d8:	37 95       	ror	r19
    10da:	27 95       	ror	r18
    10dc:	ba 95       	dec	r27
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__ultoa_invert+0xa2>
    10e0:	62 0f       	add	r22, r18
    10e2:	73 1f       	adc	r23, r19
    10e4:	84 1f       	adc	r24, r20
    10e6:	95 1f       	adc	r25, r21
    10e8:	a0 1d       	adc	r26, r0
    10ea:	08 95       	ret

000010ec <_exit>:
    10ec:	f8 94       	cli

000010ee <__stop_program>:
    10ee:	ff cf       	rjmp	.-2      	; 0x10ee <__stop_program>
